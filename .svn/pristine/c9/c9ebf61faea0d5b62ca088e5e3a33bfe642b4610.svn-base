<template>
    <div class="fillcontain">
        <ul class="menu">
            <li>
                <router-link :to='{path:"/currentInventory"}'>当前库存</router-link>
            </li>
            <li>
                <router-link :to='{path:"/inventoryDetail"}'>库存变动</router-link>
            </li>
            <li class="menuIndex">
                <router-link :to='{path:"/stocktaking"}'>库存盘点</router-link>
            </li>
            <li>
                <router-link :to='{path:"/stockTransshipment"}'>库存调拨</router-link>
            </li>
            <li>
                <router-link :to='{path:"/inventoryWarning"}'>库存预警</router-link>
            </li>
            <li>
                <router-link :to='{path:"/storeManagement"}'>多仓管理</router-link>
            </li>
            <li>
                <router-link :to='{path:"/inventoryInitialize"}'>库存初始化</router-link>
            </li>
        </ul>
        <div class="stocktaking">
            <div class="stocktakingTop">
                <div class="left">
                    <el-date-picker
                        size="small"
                        v-model="value6"
                        type="daterange"
                        placeholder="选择日期范围">
                    </el-date-picker>
                </div>
                <el-input
                    class="input1"
                    placeholder="盘点人搜索"
                    size="small"
                    icon="search"
                    v-model="input2"
                    :on-icon-click="handleIconClick">
                </el-input>
            </div>
            <div class="stocktakingButton">
                <router-link :to='{path:"/startCounting"}' class="buttonColor">开始盘点</router-link>
                <a href="javascript:void(0)" class="buttonColor" @click="difference">差异表</a>
            </div>
            <div class="stockTabs">
                <el-radio-group v-model="status" class="radioGreen" size="small">
                    <el-radio-button label="全部"></el-radio-button>
                    <el-radio-button label="未完成"></el-radio-button>
                    <el-radio-button label="已完成"></el-radio-button>
                </el-radio-group>
            </div>
            <div class="stocktakingTable">
                <el-table
                    :data="tableData"
                    style="width: 100%">
                    <el-table-column
                        prop="orderNo"
                        label="盘点编号">
                    </el-table-column>
                    <el-table-column
                        prop="checkedStockNum"
                        label="库存数">
                    </el-table-column>
                    <el-table-column
                        prop="checkActualNum"
                        label="盘点数">
                    </el-table-column>
                    <el-table-column
                        prop="changeNum"
                        label="盈亏数">
                        <template scope="scope">
                            {{scope.row.checkActualNum-scope.row.checkedStockNum}}
                        </template>
                    </el-table-column>
                    <el-table-column
                        prop="totalStockFee"
                        label="盈亏金额">
                    </el-table-column>
                    <el-table-column
                        prop="createUserId"
                        label="盘点人">
                    </el-table-column>
                    <el-table-column
                        prop="createTime"
                        label="盘点时间">
                    </el-table-column>
                    <el-table-column
                        prop="status"
                        label="状态">
                        <template scope="scope">
                            <p v-bind:class="scope.row.status ==0?'blue2':''">{{scope.row.status == 1?'完成盘点':scope.row.status == 0?'草稿':''}}</p>
                        </template>
                    </el-table-column>
                    <el-table-column label="操作">
                        <template scope="scope">
                            <router-link :to='{path:"/stocktakingRecord",query:{param:scope.row.storeOrderId}}' class="blue2">盘点详情</router-link>
                        </template>
                    </el-table-column>
                </el-table>
            </div>
            <el-pagination
                class="right"
                small
                layout="prev, pager, next"
                style="margin-top: 20px;"
                @current-change="handleCurrentChange"
                :current-page="currentPage"
                :page-size="pageSize"
                :total="totalCount">
            </el-pagination>
            <a href="javascript:void(0)" class="export_excle">导出excel</a>
        </div>
        <el-dialog
            title=""
            :visible.sync="dialogVisible"
            size="tiny">
            <div class="InInventory flex">
                <span>当前不可盘点！</span>
                <p>（该商品正在盘点中）</p>
            </div>
        </el-dialog>

    </div>
</template>

<script>
    import headTop from '../components/headTop'
    import {queryStockChanged,queryProductInfo,queryStockChecked} from '@/api/getData'
    import {userInfo,getStore,setStore} from  '../config/mUtils'


    export default {
        components: {
            headTop,
        },
        data() {
            return {
                status:'',
                input:'',
                input2:'',
                input_productCode:'',
                radio3:'',
                radio4:'',
                value6:'',
                num6:1,
                dialogVisible:false,//TODO
                productInfo:'',
                productConfigs:{
                    productInfo:{name:'',stockNum:''},
                    sizeSet:[],
                    colourSet:[]
                },
                detailForm:{},
                checkedDetails:[],
                tableData: [],
                tableData2:[],
                //默认每页数据量
                pageSize: 6,
                //默认高亮行数据id
                highlightId: -1,
                //当前页码
                currentPage: 1,
                //查询的页码
                start: 1,
                //默认数据总数
                totalCount: 0
            }
        },
        methods: {
            handleIconClick(ev) {
                this.countingShow = true;
                this.getProductVariantByProductCode();
                console.log(this.productConfigs.productInfo);
            },
            ConfirmInventory(){
                this.dialogStartCounting = false;

                this.$router.push('/stocktakingRecordList');
            },
            difference(){
                this.$router.push('/stocktakingDifference');
            },
            //页码变更
            handleCurrentChange: function(val) {
                this.currentPage = val;
                let  param = {
                    "companyId":userInfo().companyId,
                    "warehouseId":userInfo().warehouseId,
                    "orderType":"4,5",
                    "pageSize": this.pageSize,
                    "pageIndex": this.currentPage,
                };
                    this.loadData(param);

            },
            async loadData(param) {
                const res = await queryStockChecked(param);
                if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: '加载数据成功'
                    });
                    this.tableData = res.result.results;
                    this.totalCount = res.result.totalCount;
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
            },
            async getProductVariantByProductCode() {

                let  param = {
                    "companyId":userInfo().companyId,
                    "warehouseId":"W001",// TODO setwareHouseId
                    "productCode":this.input_productCode
                };

                const res = await queryProductInfo(param);
                if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: '加载数据成功'
                    });
                    this.filterProductConfigs(res.result);

                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
            },
            async createStcokOrder() {
                let  param = {
                    "type":'',
                    "warehouseId":"W001",
                    "totalStockFee":10000.00,
                    "allocateWarehouseId":"W002",
                    "details": [{
                        "companyId": "5588",
                        "memo": "",
                        "orderNum": 12,
                        "price": 80,
                        "productBarcode": "",
                        "productCode": "",
                        "productId": "",
                        "productVariantId":"10001_1_1"
                    }]
            };

                const res = await queryProductInfo(param);
                if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: '加载数据成功'
                    });
                    this.filterProductConfigs(res.result);

                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
            },
            addItemsToOrder (detailForm){
                let param = {
                        "companyId": userInfo().companyId,
                        "memo": detailForm.memo,
                        "orderNum": detailForm.num,
                        "price": 80,
                        "productCode": "",
                        "productVariantId":"10001_1_1"
                    },

                checkedDetails;
            },
            filterProductConfigs(productInfo){
                if(productInfo.length>0){
                    this.productConfigs.productInfo.name =productInfo[0].title;
                    let productNum  =0;
                    productInfo.forEach((obj) => productNum+=obj.stockNum);
                    this.productConfigs.productInfo.stockNum =productNum;
                    let sizeSet = new Set();
                    productInfo.forEach((obj) => sizeSet.add(obj.size));
                    this.productConfigs.sizeSet = [...sizeSet];
                    let colourSet = new Set();
                    productInfo.forEach((obj) => colourSet.add(obj.colour));
                    this.productConfigs.colourSet = [...colourSet];


                }

            },
            filterVariantInfo(s_size,s_colour){
                for ({size,colour,productVariantId} of this.productInfo) {
                     if(size==s_size&&colour==s_colour){
                         return productVariantId
                     }
                }



            }

        },

        mounted(){
            let  param = {
                "companyId":userInfo().companyId,
                "warehouseId":userInfo().warehouseId,
                "orderType":"4,5",
                "pageSize": this.pageSize,
                "pageIndex": this.start,
            };
            this.loadData(param);
        },

        watch: {
            '$route': function (route) {
                if(route.path=='/stocktaking'){
                    let  param = {
                        "companyId":userInfo().companyId,
                        "warehouseId":userInfo().warehouseId,
                        "orderType":"4,5",
                        "pageSize": this.pageSize,
                        "pageIndex": this.start,
                    };
                    this.loadData(param);
                }

            }
        },
        created () {
            this.intervalid1 = setInterval(() => {
                this.dialogVisible = false;
            }, 1000)
        },
        beforeDestroy(){
            clearInterval(this.intervalid1)
        },
    }
</script>

<style lang="less">
    @import '../style/mixin';
    @import '../style/common';
    @import '../style/stocktaking';
</style>
