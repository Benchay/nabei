<template>
    <div class="fillcontain">
        <ul class="menu">
            <li  class="menuIndex2">
                <a href="javascript:void(0);">商品管理</a>
            </li>
        </ul>
        <div class="commodityMnagement">
            <div class="left commodityTop">
                <el-input
                    placeholder="商品货号搜索"
                    icon="search"
                    size="small"
                    v-model="searchProductCode"
                    :on-icon-click="initloadData">
                </el-input>
                <el-input
                    placeholder="档口名称搜索"
                    icon="search"
                    size="small"
                    v-model="searchStallName"
                    :on-icon-click="initloadData">
                </el-input>
            </div>
            <div class="left commodityButton">
                <a href="javascript:void(0)" class="buttonColor3" @click="addProductClick">+添加新商品</a>
                <a href="javascript:void(0)" class="buttonColor3" @click="batchDeleteConfig">批量删除</a>
            </div>
            <div class="commodityList">
                <el-table
                    ref="multipleTable"
                    :data="tableData"
                    tooltip-effect="dark"
                    @selection-change="handleSelectionChange"
                    style="width: 100%">
                    <el-table-column
                        type="selection"
                        width="55">
                    </el-table-column>
                    <el-table-column
                        width="200"
                        label="主图/货号">
                        <template scope="scope">
                            <div  class="tableFirst">
                                <div>
                                    <img src="../image/correlate.png" alt="" v-show="scope.row.relevanceFlag">
                                </div>
                                <img class="masterDrawing" :src="scope.row.imgUrl_main" alt="">
                                <p>{{tableData[scope.$index].productCode}}</p>
                            </div>
                        </template>
                    </el-table-column>
                    <el-table-column
                        prop="stallName"
                        width="180"
                        label="档口">
                    </el-table-column>
                    <el-table-column
                        prop="colours"
                        label="颜色">
                    </el-table-column>
                    <el-table-column
                        prop="sizes"
                        label="尺码">
                    </el-table-column>
                    <el-table-column
                        prop="stockNum"
                        label="总库存">
                    </el-table-column>
                    <el-table-column
                        prop="sellPrice"
                        label="单价">
                    </el-table-column>
                    <el-table-column
                        width="200"
                        label="操作">
                        <template scope="scope">
                            <div class="operation">
                                <img src="../image/rcompile.png" alt=""  @click="updateProductClick(tableData[scope.$index])">
                                <img src="../image/rdelete.png" alt="" @click="deleteProductClick(tableData[scope.$index].id,scope.row.relevanceFlag)">
                                <img src="../image/correlate01.png" alt="" @click="relevanceProductClick(tableData[scope.$index])">
                            </div>
                        </template>
                    </el-table-column>
                </el-table>
                <el-pagination
	                small
	                class="right"
	                style="margin-top: 20px;"
	                @size-change="handleSizeChange"
	                @current-change="handleCurrentChange"
	                :current-page="currentPage"
	                :page-sizes="[10, 20, 30, 40]"
	                :page-size="pageSize"
	                layout="total, sizes, prev, pager, next, jumper"
	                :total="totalCount">
	            </el-pagination>
            </div>
        </div>
        <el-dialog title="修改商品" :visible.sync="dialogAmend"  size="small" custom-class="dialogAdd">
            <div>
            	<el-col :span="12" class="flex addTitle">
                    <p class="DialogTitle">档口名称：</p>
                    <!--<el-autocomplete
                        v-model="editStallName"
                        style="width: 220px;"
                        :fetch-suggestions="querySearchAsyncEdit"
                        placeholder="请输入档口名称"
                        @select="handleSelectEdit"
                    ></el-autocomplete>-->
                    <el-select v-model="editVmStallId" :disabled="true" @change="checkeditStallClick" placeholder="选择档口">
                        <el-option
	                        v-for="item in stallData"
	                        :key="item.id"
	                        :label="item.name"
	                        :value="item.id">
	                    </el-option>
                    </el-select>
                </el-col>

                <el-col :span="12" class="flex addTitle" v-if="whether">
                   <p class="DialogTitle">档口货号：</p>
                   <el-input
                       placeholder=""
                       :disabled="true"
                       style="width: 220px;"
                       v-model="eidtStallProductCode2">
                   </el-input>
                   <!--档口货号 选择小弹窗-->
                   <el-popover
                       ref="popover4"
                       placement="bottom-end"
                       width="300"
                       trigger="click"
                       v-model="popover">
                       <div>
                           <el-input
                               placeholder="请输入档口货号..."
                               icon="search"
                               size="small"
                               :disabled="true"
                               v-model="editsearchStallCode"
                               :on-icon-click="edithandleIconClick">
                           </el-input>
                           <div class="chooseRadio">
                           	<el-radio-group v-model="editproductIdRadio">
                           		<el-radio v-for="(item , index) in editproductCodeData" :label="item.id" :key="item.id">{{item.productCode}}</el-radio>
                           	</el-radio-group>
                           </div>
                           <div slot="footer" class="dialog-footer">
                               <a href="javascript:void(0)" @click="confirmeditProductCodeClick" class="buttonColor3">确 定</a>
                               <a href="javascript:void(0)" @click="popover = false" class="buttonColor2">取 消</a>
                           </div>
                       </div>
                   </el-popover>
                   <!--<el-button v-popover:popover4 class="choose" size="mini">选择</el-button>-->
               </el-col>
            </div>
            <div>
                <!--系统已有档口情况 显示一下内容-->
                <div class="dialogAddContent" v-if="whether">
                    <el-col :span="12" class="flex addTitle">
                        <p class="DialogTitle">商品货号：</p>
                        <p>{{editProductStallCode + "-" + editProduct.stallProductCode}}</p>
                    </el-col>
                    <el-col :span="12" class="flex addTitle">
                        <p class="DialogTitle">单价：</p>
                        <p>{{editProduct.price}}元</p>
                    </el-col>
                    <el-col :span="12" class="flex addTitle">
                        <p class="DialogTitle">商品主图：</p>
                        <img :src="imgUrl_main" alt="" class="addImg">
                    </el-col>
                    <div>
                        <el-table
                            :data="editTableData4"
                            height="160"
                            style="width: 100%">
                            <el-table-column
                                prop="colour"
                                label="颜色">
                            </el-table-column>
                            <el-table-column
                                prop="size"
                                label="尺码">
                            </el-table-column>
                            <el-table-column
                                prop="stockNum"
                                label="数量">
                            </el-table-column>
                        </el-table>
                    </div>
                </div>
                <!---->
                <!--假档口情况 显示一下内容-->
                <div class="dialogAddContent" v-if="!whether">
                    <el-col :span="12" class="flex addTitle">
                        <p class="DialogTitle">商品货号：</p>
                        <el-input
                            placeholder=""
                            style="width: 220px;"
                            :disabled="true"
                            v-model="eidtStallProductCode1">
                        </el-input>
                    </el-col>
                    <el-col :span="12" class="flex addTitle">
                        <p class="DialogTitle">单价：</p>
                        <el-input
                            placeholder=""
                            style="width: 220px;"
                            v-model="editproductPrice">
                        </el-input>
                    </el-col>
                    <el-col :span="24" class="flex addTitle">
                       <p class="DialogTitle">商品主图：</p>
                       <el-upload
                         name = "uploadFile"
						  class="avatar-uploader"
						  action="/cws/uploadFile"
						  :show-file-list="false"
						  :on-success="handleAvatarSuccess"
						  :before-upload="beforeAvatarUpload">
						  <img v-if="dialogImgVisible" :src="imgUrl_main" class="avatar">
						  <i v-else class="el-icon-plus avatar-uploader-icon"></i>
						</el-upload>
                   </el-col>
                    <div>
                        <el-table
                            :data="editTableData3"
                            height="160"
                            style="width: 100%">
                            <el-table-column
                                label="颜色">
                                <template scope="scope">
                                    <el-input
                                        placeholder=""
                                        style="width: 110px;"
                                        v-model="editTableData3[scope.$index].colour">
                                    </el-input>
                                </template>
                            </el-table-column>
                            <el-table-column
                                label="尺码">
                                <template scope="scope">
                                    <el-input
                                        placeholder=""
                                        style="width: 110px;"
                                        v-model="editTableData3[scope.$index].size">
                                    </el-input>
                                </template>
                            </el-table-column>
                            <el-table-column
                                label="数量">
                                <template scope="scope">
                                    <el-input
                                        placeholder=""
                                        style="width: 110px;"
                                        v-model="editTableData3[scope.$index].stockNum">
                                    </el-input>
                                </template>
                            </el-table-column>
                            <el-table-column
                                label="操作">
                                <template scope="scope">
                                    <img src="../image/delete02.png" @click="deleteeditProductVariant(scope.$index)" alt="">
                                </template>
                            </el-table-column>
                        </el-table>
                        <a href="javascript:void(0)" @click="addeditProductVariant" class="continueAdd right">+继续添加</a>
                    </div>
                </div>
                <!---->
            </div>
            <!---->

            <div slot="footer" class="dialog-footer">
                <a href="javascript:void(0)" @click="updateNewProduct" class="buttonColor3">确 定</a>
                <a href="javascript:void(0)" @click="dialogAmend = false" class="buttonColor2">取 消</a>
            </div>
        </el-dialog>
        <el-dialog title="添加新商品" :visible.sync="dialogAdd"  size="small" custom-class="dialogAdd" style="top:-5%;">
           <div>
                <el-col :span="12" class="flex addTitle">
                    <p class="DialogTitle">档口名称：</p>
                    <!--<el-autocomplete
                        v-model="stallName"
                        style="width: 220px;"
                        :fetch-suggestions="querySearchAsync"
                        placeholder="请输入档口名称"
                        @select="handleSelect"
                    ></el-autocomplete>-->
                    <el-select v-model="vmStallId" @change="checkStallClick" placeholder="选择档口">
                        <el-option
	                        v-for="item in stallData"
	                        :key="item.id"
	                        :label="item.name"
	                        :value="item.id">
	                    </el-option>
                    </el-select>
                </el-col>
               <!--系统已有档口情况 显示货号搜索功能-->
               <el-col :span="12" class="flex addTitle" v-if="whether">
                   <p class="DialogTitle">档口货号：</p>
                   <el-input
                       placeholder=""
                       style="width: 220px;"
                       v-model="stallproductCodeType2">
                   </el-input>
                   <!--档口货号 选择小弹窗-->
                   <el-popover
                       ref="popover4"
                       placement="bottom-end"
                       width="300"
                       trigger="click"
                       v-model="popover">
                       <div>
                           <el-input
                               placeholder="请输入档口货号..."
                               icon="search"
                               size="small"
                               v-model="searchStallCode"
                               :on-icon-click="handleIconClick">
                           </el-input>
                           <div class="chooseRadio">
                           	<el-radio-group v-model="productIdRadio">
                           		<el-radio v-for="(item , index) in productCodeData" :label="item.id" :key="item.id">{{item.productCode}}</el-radio>
                           	</el-radio-group>
                           </div>
                           <div slot="footer" class="dialog-footer">
                               <a href="javascript:void(0)" @click="confirmProductCodeClick" class="buttonColor3">确 定</a>
                               <a href="javascript:void(0)" @click="popover = false" class="buttonColor2">取 消</a>
                           </div>
                       </div>
                   </el-popover>
                   <el-button v-popover:popover4 class="choose" size="mini">选择</el-button>
               </el-col>
               <!--假档口情况 显示无货号搜索功能 无选择-->
               <el-col :span="12" class="flex addTitle" v-if="!whether">
                   <p class="DialogTitle">档口货号：</p>
                   <el-input
                       placeholder=""
                       style="width: 220px;"
                       v-model="stallproductCodeType1">
                   </el-input>
               </el-col>
           </div>
            <!--选择完档口名称 显示-->
           <div>
               <!--系统已有档口情况 显示一下内容-->
               <div class="dialogAddContent" v-if="whether & productCodeFlag">
                   <el-col :span="12" class="flex addTitle">
                       <p class="DialogTitle">商品货号：</p>
                       <p>{{addProductStallCode}}-{{productCodeType2}}</p>
                   </el-col>
                   <el-col :span="12" class="flex addTitle">
                       <p class="DialogTitle">单价：</p>
                       <p>{{productPriceType2}}元</p>
                   </el-col>
                   <el-col :span="12" class="flex addTitle">
                       <p class="DialogTitle">商品主图：</p>
                       <img :src="imgUrl_main" alt="" class="addImg">
                   </el-col>
                   <div>
                       <el-table
                           :data="productVariantData"
                           height="160"
                           style="width: 100%">
                           <el-table-column
                               prop="colour"
                               label="颜色">
                           </el-table-column>
                           <el-table-column
                               prop="size"
                               label="尺码">
                           </el-table-column>
                           <el-table-column
                               prop="stockNum"
                               label="数量">
                           </el-table-column>
                       </el-table>
                   </div>
               </div>
               <!---->
               <!--假档口情况 显示一下内容-->
               <div class="dialogAddContent" v-if="!whether">
                   <el-col :span="12" class="flex addTitle">
                       <p class="DialogTitle">商品货号：</p>
                       {{addProductStallCode}}-{{stallproductCodeType1}}
                       <!--<el-input
                           placeholder=""
                           style="width: 220px;"
                           v-model="stallproductCodeType1">
                       </el-input>-->
                   </el-col>
                   <el-col :span="12" class="flex addTitle">
                       <p class="DialogTitle">单价：</p>
                       <el-input
                           placeholder=""
                           style="width: 220px;"
                           onkeyup="value=value.replace(/[^\d]/g,'')"
                           v-model="productPriceType1">
                       </el-input>
                   </el-col>
                   <el-col :span="24" class="flex addTitle">
                   		<!--<el-form-item label="商品主图：">
                            <el-upload
                             name = "uploadFile"
							  class="avatar-uploader"
							  action="/cws/uploadFile"
							  :show-file-list="false"
							  :on-success="handleAvatarSuccess"
							  :before-upload="beforeAvatarUpload">
							  <img v-if="dialogImgVisible" :src="imgUrl_main" class="avatar">
							  <i v-else class="el-icon-plus avatar-uploader-icon"></i>
							</el-upload>
							fdsaf
                        </el-form-item>-->
                       <p class="DialogTitle">商品主图：</p>
                       <el-upload
                         name = "uploadFile"
						  class="avatar-uploader"
						  action="/cws/uploadFile"
						  :show-file-list="false"
						  :on-success="handleAvatarSuccess"
						  :before-upload="beforeAvatarUpload">
						  <img v-if="dialogImgVisible" :src="imgUrl_main" class="avatar">
						  <i v-else class="el-icon-plus avatar-uploader-icon"></i>
						</el-upload>
                   </el-col>
                   <div v-show="!whether">
                       <el-table
                           :data="tableData3"
                           height="160"
                           style="width: 100%">
                           <el-table-column
                               label="颜色">
                               <template scope="scope">
                                   <el-input
                                       placeholder=""
                                       style="width: 110px;"
                                       v-model="tableData3[scope.$index].colour">
                                   </el-input>
                               </template>
                           </el-table-column>
                           <el-table-column
                               label="尺码">
                               <template scope="scope">
                                   <el-input
                                       placeholder=""
                                       style="width: 110px;"
                                       v-model="tableData3[scope.$index].size">
                                   </el-input>
                               </template>
                           </el-table-column>
                           <el-table-column
                               label="数量">
                               <template scope="scope">
                                   <el-input
                                       placeholder=""
                                       style="width: 180px;"
                                       v-model="tableData3[scope.$index].stockNum">
                                   </el-input>
                               </template>
                           </el-table-column>
                           <el-table-column
                               label="操作">
                               <template scope="scope">
                                   <img src="../image/delete02.png" @click="deleteProductVariant(scope.$index)" alt="">
                               </template>
                           </el-table-column>
                       </el-table>
                       <a href="javascript:void(0)" @click="addProductVariant" class="continueAdd right">+继续添加</a>
                   </div>
               </div>
               <!---->
           </div>
            <!---->

            <div slot="footer" class="dialog-footer">
                <a href="javascript:void(0)" @click="addNewProduct" class="buttonColor3">确认添加</a>
                <a href="javascript:void(0)" @click="dialogAdd = false" class="buttonColor2">取 消</a>
            </div>
        </el-dialog>
        <el-dialog
            title="关联货号"
            :visible.sync="dialogRelevance"
            size="small">
            <div>
                <el-table
                    :data="tableData4"
                    style="width: 100%">
                    <el-table-column
                        prop="productCode"
                        label="当前商品货号">
                    </el-table-column>
                    <el-table-column
                        prop="stall"
                        label="档口/货号">
                        <template scope="scope">
                            {{scope.row.stallName}}/{{scope.row.productCode}}
                        </template>
                    </el-table-column>
                    <el-table-column
                        prop="price"
                        label="单价">
                    </el-table-column>
                </el-table>
                <p class="settingRelevance">设置关联货号：</p>
                <el-table
                    height="250"
                    :data="tableData5"
                    style="width: 100%">
                    <el-table-column
                        prop="itemNo"
                        label="关联商品货号">
                        <template scope="scope">
                            <el-input
                                placeholder=""
                                style="width: 110px;"
                                v-model="tableData5[scope.$index].productCode">
                            </el-input>
                        </template>
                    </el-table-column>
                    <el-table-column
                        prop="stallName"
                        label="档口">
                    </el-table-column>
                    <el-table-column
                        prop="price"
                        label="单价">
                    </el-table-column>
                    <el-table-column
                        label="操作">
                        <template scope="scope">
                            <img src="../image/delete02.png" @click="deleteRelevanceProduct(scope.$index)" alt="">
                        </template>
                    </el-table-column>
                </el-table>
                <a href="javascript:void(0)" @click="addRelevanceProductVariant" class="continueAdd right">+继续添加</a>
            </div>
            <div slot="footer" class="dialog-footer">
                <a href="javascript:void(0)" @click="saveRelevanceProduct" class="buttonColor3">保 存</a>
                <a href="javascript:void(0)" @click="dialogRelevance = false" class="buttonColor2">取 消</a>
            </div>
        </el-dialog>
    </div>
</template>

<script>
    import headTop from '../components/headTop'
    import {updateStockWareHouseSeatInfo,querySellerProduct,queryProductByStallId,getProductVariantByProductCodeAndStall,createSellerProduct,updateSellerProduct,setSellerProductRelation,querySellerProductsByRelationId,batchDeleteSellerProduct,getProductCodeConfig,queryVmStall,getProductByCodeOrId} from '@/api/getData'
	import {userInfo} from  '../config/mUtils'

    export default {
        components: {
            headTop,
        },
        computed: {
            classObject: function () {
                return {
                    active: this.isActive && !this.error,
                    'text-danger': this.error && this.error.type === 'fatal',
                }
            }
        },
        data() {
            return {
            	imgUrl_main:'',//产品主图
            	
            	dialogImgVisible:false,
            	
            	searchProductCode:'',

            	searchStallName:'',

            	stallName:'',//档口名称

            	vmStallId:'',

            	editVmStallId:'',

//                系统是否有档口信息
                whether:false,

                //系统是否有货号
                productCodeFlag:false,

                //档口列表
                stallData:[],

                //临时货号列表--添加商品
                productCodeData:[],

                //临时货号列表--编辑商品
                editproductCodeData : [],

                productIdRadio:'',

                editproductIdRadio:'',//修改商品时，档口存在时选择的商品货号

                stallproductCodeType2:'',//档口存在时的货号

                stallproductCodeType1:'',//档口不存在时的货号

                productCodeType2:'',

                productPriceType2:'',//档口存在时的单价

                productPriceType1:'',//档口不存在时的单价

                productVariantData:[],

                addFormStallId:'',

                productVariantId : '',

                searchStallCode:'',

                editFormStallId:'',//修改商品的档口id

                editStallName:'',//修改商品的档口名称

                eidtStallProductCode2:'',//修改商品时，档口存在时的货号

                eidtStallProductCode1:'',//修改商品时，档口不存在时的货号

                editsearchStallCode:'',//修改商品时，货号查询参数

                editProduct:{},//修改商品时，档口存在、货号存在时商品信息

                editTableData4:[], //修改商品时，档口存在、货号存在时变体信息

                editproductPrice:'',//修改商品时，档口不存在时的单价

                editTableData3:[],//修改商品时，档口不存在时变体信息

                editProductId:'',//修改商品时商品id

                productCodeConfig:'',//公司商品货号前缀
                addProductStallCode:'',


				editProductStallCode:'',

                //默认每页数据量
                pageSize: 10,
                //当前页码
                currentPage: 1,

                totalCount:0,

                dialogImageUrl: '',
                dialogVisible: false,
                radio4: '1',
                input:'',
                radio3:1,
                radio2:1,
                dialogAmend:false,
                dialogAdd:false,
                dialogRelevance:false,
                popover:false,
                input2:'',
                input3:'',
                num6:1,
                tableData: [{
                    color:'白色',
                    size:'L',
                    number:'我是档口名称/MG110',
                    inventory:120,
                    sum:25,
                    choose:true
                },{
                    color:'白色',
                    size:'L',
                    number:'我是档口名称/MG110',
                    inventory:120,
                    sum:25,
                    choose:true
                },{
                    color:'白色',
                    size:'L',
                    number:'我是档口名称/MG110',
                    inventory:120,
                    sum:25,
//                    是否关联
                    choose:false
                },{
                    color:'白色',
                    size:'L',
                    number:'我是档口名称/MG110',
                    inventory:120,
                    sum:25,
//                    是否关联
                    choose:false
                },],
                tableData2:[{
                   color:'白色',
                    size:'S',
                    number:50
                },{
                    color:'白色',
                    size:'S',
                    number:50
                },{
                    color:'白色',
                    size:'S',
                    number:50
                }],
                tableData3:[
	                {

	                }
                ],
                tableData4:[{itemNo:'MG110',stall:'档口名称11',sum:25}],
                tableData5:[{}],//关联货号
                currentPage4:10,

                restaurants: [],
                state4: '',
                timeout:  null

            }
        },
        mounted(){
            this.initloadData();
        //    this.initloadStallData();
            this.initloadVmStallData();
        //    this.restaurants = this.loadAll();
        },
        methods: {

        	//从服务器获取数据
            async initloadData() {
            	this.tableData = [];
            	let param ={
            		companyId:userInfo().companyId,
            		pageIndex:this.currentPage,
    				pageSize:this.pageSize,
    				stallName:this.searchStallName,
    				productCode:this.searchProductCode
            	}
                const res = await querySellerProduct(param);
                if (res.isSuccess == true) {
                	this.tableData = res.result.results;
                	this.totalCount =  res.result.totalCount;
                }else{
                    this.$message({
                        type: 'error',
                        message: res.isSuccess
                    });
                }
            },

            //从服务器获取数据
            async initloadVmStallData() {
            	this.tableData = [];
            	let param ={
            		companyId:userInfo().companyId,
            		pageIndex:1,
            		pageSize:1000
            	}
                const res = await queryVmStall(param);
                if (res.isSuccess == true) {
                	this.stallData = res.result.results;
                }else{
                    this.$message({
                        type: 'error',
                        message: res.isSuccess
                    });
                }
            },

            async initloadData2() {
            	this.tableData = [];
            	let param ={
            		companyId:userInfo().companyId,
            		pageIndex:this.currentPage,
    				pageSize:this.pageSize,
    				stallName:this.searchStallName,
    				productCode:this.searchProductCode
            	}
                const res = await querySellerProduct(param);
                if (res.isSuccess == true) {
                	this.tableData = res.result.results;
                }else{
                    this.$message({
                        type: 'error',
                        message: res.isSuccess
                    });
                }
            },

            
            //从服务器获取数据(根据档口加载货号信息)---添加商品
            async initloadProductCodeData(stallId,code) {
            	this.productCodeData = [];
            	let param ={
            		stallId:stallId,
            		productCode:code
            	}
                const res = await queryProductByStallId(param);
                if (res.isSuccess == true) {
                	this.productCodeData = res.result;
                	if(this.stallproductCodeType2 != ''){
                		this.productCodeFlag = false;
                		res.result.forEach((obj) => {
	                		if(obj.productCode == this.stallproductCodeType2){
	                			this.productCodeFlag = true;
	                		}
	                	});
                	}

                }else{
                    this.$message({
                        type: 'error',
                        message: res.isSuccess
                    });
                }
            },

            //从服务器获取数据(根据档口加载货号信息)---编辑商品
            async initloadeditProductCodeData(stallId,code) {
            	this.editproductCodeData = [];
            	let param ={
            		stallId:stallId,
            		productCode:code
            	}
                const res = await queryProductByStallId(param);
                if (res.isSuccess == true) {
                	this.editproductCodeData = res.result;
                	if(this.eidtStallProductCode2 != ''){
                		this.productCodeFlag = false;
                		res.result.forEach((obj) => {
	                		if(obj.productCode == this.eidtStallProductCode2){
	                			this.productCodeFlag = true;
	                		}
	                	});
	                	if(this.productCodeFlag == true){
	                		this.editProduct = {
			            		stallProductCode:this.eidtStallProductCode2,
			            		price:this.editproductPrice
			            	}
	                	}
                	}

                }else{
                    this.$message({
                        type: 'error',
                        message: res.isSuccess
                    });
                }
            },

            //从服务器获取数据(根据档口和货号加载变体信息)
            async getProductByProductId(productId) {
            	let param ={
            		productId:productId
            	}
                const res = await getProductByCodeOrId(param);
                if (res.isSuccess == true) {
                	this.productVariantData = res.result.productVariant;
                	this.imgUrl_main = res.result.imgUrl_main;
                	this.productVariantData.forEach((obj) => {
                		obj.stockNum = 0;
                	})
                }else{
                    this.$message({
                        type: 'error',
                        message: res.isSuccess
                    });
                }
            },

            //从服务器获取数据(根据档口和货号加载变体信息)
            async geteditProductByProductId(productId) {
            	let param ={
            		productId:productId
            	}
                const res = await getProductByCodeOrId(param);
                if (res.isSuccess == true) {
                	this.editTableData4 = res.result.productVariant;
                	this.editTableData4.forEach((obj) => {
                		obj.stockNum = 0;
                	});
                }else{
                    this.$message({
                        type: 'error',
                        message: res.isSuccess
                    });
                }
            },

            deleteRow(index, rows) {
                rows.splice(index, 1);
            },
            clickRotate(index){
                this.tableData3[index].member = !this.tableData3[index].member ;
            },
            handleIconClick(ev) {
            	this.initloadProductCodeData(this.addFormStallId,this.searchStallCode);
            },
            handleSizeChange(val) {
                console.log(`每页 ${val} 条`);
                this.currentPage = 1;
                this.pageSize = val;
                this.initloadData();
            },
            handleCurrentChange(val) {
                console.log(`当前页: ${val}`);
                this.currentPage = val;
                this.initloadData();
            },
            beforeAvatarUpload(file) {
		        const isJPG = file.type === 'image/jpeg';
		        const isPNG = file.type === 'image/png';
		        const isLt2M = file.size / 1024 / 1024 < 2;
		        if (!isJPG && !isPNG) {
		          this.$message.error('上传头像图片只能是 JPG或PNG 格式!');
		        }
		        if (!isLt2M) {
		          this.$message.error('上传头像图片大小不能超过 2MB!');
		        }
		        return isJPG && isLt2M;
		    },
            handleAvatarSuccess(res, file) {
                this.dialogImgVisible = true;
            	this.imgUrl_main = "http://proxy.tintop.cn:26880/"+res.result;
            },

            edithandleIconClick(ev){
            	this.initloadeditProductCodeData(this.addFormStallId,this.searchStallCode);
            },
//            添加新商品 弹窗档口搜索
            loadAll() {
                return [
                    { "value": "档口名称1", "address": "长宁区新渔路144号" },
                    { "value": "档口名称2", "address": "上海市长宁区淞虹路661号" },
                    { "value": "档口名称3", "address": "上海市普陀区真北路988号创邑金沙谷6号楼113" },
                ];
            },
            querySearchAsync(queryString, cb) {
                var restaurants = this.restaurants;
                var results = queryString ? restaurants.filter(this.createStateFilter(queryString)) : restaurants;

                clearTimeout(this.timeout);
                this.timeout = setTimeout(() => {
                    cb(results);
                }, 3000 * Math.random());
            },
            createStateFilter(queryString) {
                return (state) => {
                    return (state.value.indexOf(queryString.toLowerCase()) === 0);
                };
            },
            handleSelect(item) {
            	this.whether = true;
            	this.addFormStallId = item.id;
            	this.initloadProductCodeData(item.id,this.searchStallCode);
            },

            querySearchAsyncEdit(queryString, cb) {
                var restaurants = this.restaurants;
                var results = queryString ? restaurants.filter(this.createStateFilterEdit(queryString)) : restaurants;

                clearTimeout(this.timeout);
                this.timeout = setTimeout(() => {
                    cb(results);
                }, 3000 * Math.random());
            },

            createStateFilterEdit(queryString) {
                return (state) => {
                    return (state.value.indexOf(queryString.toLowerCase()) === 0);
                };
            },
            handleSelectEdit(item) {
            	this.whether = true;
            	this.editFormStallId = item.id;
            	this.initloadeditProductCodeData(item.id,this.searchStallCode);
            },

            confirmProductCodeClick(){
            	this.productCodeData.forEach((obj) => {
            		if(obj.id == this.productIdRadio){
            			this.productPriceType2 = obj.sellPrice;
            			this.stallproductCodeType2 = obj.productCode;
            			this.productCodeType2 = obj.productCode;
            		}
            	});
            	this.productCodeFlag = true;
            	this.popover = false;
            	this.getProductByProductId(this.productIdRadio);
            },

            confirmeditProductCodeClick(){
            	let tempProductPrice = '';
            	this.editproductCodeData.forEach((obj) => {
            		if(obj.id == this.editproductIdRadio){
            			tempProductPrice = obj.sellPrice;
            			this.eidtStallProductCode2 = obj.productCode;
            		}
            	});

            	this.editProduct = {
            		stallProductCode:this.eidtStallProductCode2,
            		price:tempProductPrice
            	}
            	this.productCodeFlag = true;
            	this.geteditProductByProductId(this.editproductIdRadio);
                this.popover = false
            },

            async addNewProduct(){
            	let stallproductCode = '';
            	let productPrice = '';
            	if(this.whether){
            		stallproductCode = this.addProductStallCode+"-"+this.productCodeType2;
            		productPrice = this.productPriceType2;
            	}else{
            		stallproductCode = this.addProductStallCode+"-"+this.stallproductCodeType1;
            		productPrice = this.productPriceType1;
            	}
            	var pricePattern = /^(-?\d+)(\.\d+)?$/;
                var pricePattern2 = /^-?\d+\.?\d{0,2}$/;
            	if(productPrice != ''){
            		if (!pricePattern.test(productPrice)) {
	                    this.$message({
					        type: 'error',
					        message: "商品单价只能输入数字"
					    });
					    return;
	                }else if(!pricePattern2.test(productPrice)){
	                	this.$message({
					        type: 'error',
					        message: "商品单价不能超过两位小数"
					    });
					    return;
	                }else if(productPrice<=0){
	                	this.$message({
					        type: 'error',
					        message: "商品单价只能输入正数"
					    });
					    return;
	                }
            	}
            	let productVariantDataTemp = [];
            	if(this.whether){
            		productVariantDataTemp = this.productVariantData;
            	}else{
            		productVariantDataTemp = this.tableData3;
            	}
            	let json = {};
            	let productVariantFlag = true;
            	productVariantDataTemp.forEach((obj) => {
            		let key = obj.colour+"-"+obj.size;
            		if(!json[key]){
            			json[key] = key;
            		}else{
            			productVariantFlag = false;
            		}
            	})
            	if(!productVariantFlag){
            		this.$message({
				        type: 'error',
				        message: "颜色和尺码重复，请重新输入"
				    });
				    return;
            	}
            	let param = {
            		stallName:this.stallName,
            		productCode:stallproductCode,
            		price:productPrice,
            		productVariant:productVariantDataTemp,
            		stallId:this.addFormStallId,
            		companyId:userInfo().companyId,
            		imgUrl_main:this.imgUrl_main
            	}
                const res = await createSellerProduct(param);
            	if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: res.result.msg
                    });
                    this.dialogAdd = false;
                    this.initloadData();
                    // this.tableData.push()
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
            },

            addProductVariant(){
            	let row = {
            		color:'',
					size:''
            	};
            	this.tableData3.push(row);
            },

            addRelevanceProductVariant(){
            	let row = {

            	};
            	this.tableData5.push(row);
            },

            addeditProductVariant(){
            	let row = {

            	}
            	this.editTableData3.push(row);
            },

            deleteProductVariant(index){
            	this.tableData3.splice(index,1);
            },

            deleteRelevanceProduct(index){
            	this.tableData5.splice(index,1);
            },

            deleteeditProductVariant(index){
            	this.editTableData3.splice(index,1)
            },

            updateProductClick(row){
            	this.imgUrl_main = row.imgUrl_main;
            	this.dialogImgVisible = true;
            	this.editFormStallId = row.stallId;
            	this.editProductId = row.id;
            	this.editStallName = row.stallName;
            	this.whether = false;
            	this.editProductStallCode = row.codePrefix;
            	this.editVmStallId = row.vmStallId;
            	this.stallData.forEach((obj) => {
            		if(obj.status == 1 && obj.id == row.vmStallId){
            			this.whether = true;
            		}
            	});
            	this.editproductPrice = row.sellPrice;
            	if(this.whether){
            		this.editProduct = {
	            		stallProductCode:row.stallCode,
	            		price:row.sellPrice,
	            		imgUrl_main:row.imgUrl_main
	            	}
            		this.editTableData4 = row.productVariant;
            		this.eidtStallProductCode2 = row.stallCode;
            		this.initloadeditProductCodeData(this.editFormStallId,'');
            	}else{
            		this.editTableData3 = row.productVariant;
            		this.eidtStallProductCode1 = row.productCode;
            	}


            	/*this.editStallName = stallName;
            	this.whether = false;
            	this.restaurants.forEach((obj) => {
            		if(obj.value == stallName){
            			this.whether = true;
            			this.addFormStallId = obj.id;
            		}
            	});
            	let row = {
            		colour : colour,
            		size : size,
            		stockNum : stockNum
            	}
            	if(this.whether){
            		this.eidtStallProductCode2 = productCode;
            		this.editTableData4 = [];
            		this.editTableData4.push(row);
            	}else{
            		this.eidtStallProductCode1 = productCode;
            		this.editproductPrice = productPrice;
            		this.editTableData3 = [];
					this.editTableData3.push(row);
            	}

            	this.initloadeditProductCodeData(this.addFormStallId);
            	this.productVariantId = id;*/
            	this.dialogAmend = true;
            },

            relevanceProductClick(row){
            	this.tableData4 = [];
            	this.tableData5 = [];
            	let record = {
            		productId:row.id,
            		productCode:row.productCode,
            		stallName:row.stallName,
            		price:row.sellPrice
            	}
            	this.tableData4.push(record);
            	this.loadRelevanceProduct(row.id);
            	this.dialogRelevance = true;
            },

            addProductClick(){
            	this.stallName = '';//档口名称
//                系统是否有档口信息
                this.whether = false;

                //系统是否有货号
                this.productCodeFlag = false;

                this.vmStallId = '';

                //临时货号列表--添加商品
                this.productCodeData = [];

                this.productCodeRadio = '';

                this.stallproductCodeType2 = '';//档口存在时的货号

                this.stallproductCodeType1 = '';//档口不存在时的货号

                this.productCodeType2 = '';

                this.productPriceType2 = '';//档口存在时的单价

                this.productPriceType1 = '';//档口不存在时的单价

                this.productVariantData = [];

                this.addFormStallId = '';
				
                this.tableData3 = [{}];
                
                this.imgUrl_main = '';

                this.dialogAdd = true;
            },

            async updateNewProduct(){
            	let stallproductCode = '';
            	let productPrice = '';
            	let productVariantDataTemp = [];
            	if(this.whether){
            		stallproductCode = this.editProductStallCode+"-"+this.eidtStallProductCode2;
            		productPrice = this.editProduct.price;
            		productVariantDataTemp = this.editTableData4;
            	}else{
            		stallproductCode = this.eidtStallProductCode1;
            		productPrice = this.editproductPrice;
            		productVariantDataTemp = this.editTableData3;
            	}
            	var pricePattern = /^(-?\d+)(\.\d+)?$/;
                var pricePattern2 = /^-?\d+\.?\d{0,2}$/;
            	if(productPrice != ''){
            		if (!pricePattern.test(productPrice)) {
	                    this.$message({
					        type: 'error',
					        message: "商品单价只能输入数字"
					    });
					    return;
	                }else if(!pricePattern2.test(productPrice)){
	                	this.$message({
					        type: 'error',
					        message: "商品单价不能超过两位小数"
					    });
					    return;
	                }else if(productPrice<=0){
	                	this.$message({
					        type: 'error',
					        message: "商品单价只能输入正数"
					    });
					    return;
	                }
            	}
            	let json = {};
            	let productVariantFlag = true;
            	productVariantDataTemp.forEach((obj) => {
            		let key = obj.colour+"-"+obj.size;
            		if(!json[key]){
            			json[key] = key;
            		}else{
            			productVariantFlag = false;
            		}
            	})
            	if(!productVariantFlag){
            		this.$message({
				        type: 'error',
				        message: "颜色和尺码重复，请重新输入"
				    });
				    return;
            	}
            	let param = {
            		productId:this.editProductId,
            		stallName:this.editStallName,
            		productCode:stallproductCode,
            		price:productPrice,
            		productVariant:productVariantDataTemp,
            		stallId:this.editFormStallId,
            		companyId:userInfo().companyId,
            		imgUrl_main:this.imgUrl_main
            	}
            	const res = await updateSellerProduct(param);
            	if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: res.result.msg
                    });
                    this.initloadData();
                    this.dialogAmend = false;
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
            },

            async saveRelevanceProduct(){
            	let productId = '';
            	let relationProductCodes = [];
            	if(this.tableData4.length>0){
            		productId = this.tableData4[0].productId;
            	}
            	this.tableData5.forEach((obj) => {
            		if(obj.productCode){
            			relationProductCodes.push(obj.productCode);
            		}
            	});
            	
            	let param = {
            		productId:productId,
            		relationProductCodes:relationProductCodes
            	}
            	const res = await setSellerProductRelation(param);
            	if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: res.result.msg
                    });
                    this.initloadData();
                    this.dialogRelevance = false;
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
            },

            async loadRelevanceProduct(productId){
            	this.tableData5 = [];
            	let param = {
            		productId:productId
            	}
            	const res = await querySellerProductsByRelationId(param);
            	if (res.isSuccess == true) {
            		if(res.result.length>0){
            			this.tableData5 = res.result;
            		}else{
            			this.tableData5.push({});
            		}
                    
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
            },

            async batchDeleteProductForSeller(array){
            	let param = {
            		productIds:array
            	}
            	const res = await batchDeleteSellerProduct(param);
            	if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: res.result.msg
                    });
                    this.initloadData();
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
            },

            deleteProductClick(productId,flag){
            	let msg = '';
            	if(flag != null && flag){
            		msg = '已关联其他商品，删除之后关联失效，确认删除吗?';
            	}else{
            		msg = '是否确认删除选中的信息?';
            	}
            	let array = [productId];
            	this.$confirm(msg, '提示', {
	                confirmButtonText: '确定',
	                cancelButtonText: '取消',
	                type: 'warning'
	              }).then(() => {
	                this.batchDeleteProductForSeller(array);
	              }).catch(() => {

	              });
            },

            //多选响应
            handleSelectionChange: function(val) {
                this.multipleSelection = val;
            },

			batchDeleteConfig() {
              if(this.multipleSelection == undefined || this.multipleSelection.length==0){
                  this.$message({
                        type: 'error',
                        message: '请先勾选要删除的商品！'
                    });
                    return;
              }
                var array = [];
                this.multipleSelection.forEach((item) => {
                    array.push(item.id);
                })
                if(array.length <1){
                  this.$message({
                        type: 'error',
                        message: '请先勾选要删除的商品！'
                    });
                    return;
                }
              this.$confirm('是否确认删除选中的商品?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                this.batchDeleteProductForSeller(array);
              }).catch(() => {

              });
          },

          checkStallClick(){
          	this.productCodeData = [];
          	let stallState = '';
          	let stallId = '';
          	let stallCode = '';
          	this.addProductStallCode = '';
          	this.stallData.forEach((obj) =>{
          		if(this.vmStallId == obj.id){
          			stallState = obj.status;
          			if(obj.stallId){
          				stallId = obj.stallId;
          			}
          			if(obj.stallCode){
          				stallCode = obj.stallCode;
          			}
          			if(obj.name){
          				this.stallName = obj.name;
          			}
          		}
          	});
          	if(stallState == 1){
          		this.whether = true;
          	}else{
          		this.whether = false;
          	}
          	this.addProductStallCode = stallCode;
          	if(this.whether && stallId != ''){
          		this.addFormStallId = stallId;
          		this.initloadProductCodeData(stallId,this.searchStallCode);
          	}
          },

          checkeditStallClick(){
          	this.editproductCodeData = [];
          	let stallState = '';
          	let stallId = '';
          	let stallCode = '';
          	this.addProductStallCode = '';
          	this.stallData.forEach((obj) =>{
          		if(this.editVmStallId == obj.id){
          			stallState = obj.status;
          			if(obj.stallId){
          				stallId = obj.stallId;
          			}
          			if(obj.stallCode){
          				stallCode = obj.stallCode;
          			}
          			if(obj.name){
          				this.editStallName = obj.name;
          			}
          		}
          	});
          	if(stallState == 1){
          		this.whether = true;
          	}else{
          		this.whether = false;
          	}
          	this.editProductStallCode = stallCode;
          	if(this.whether && stallId != ''){
          		this.editFormStallId = stallId;
            	this.initloadeditProductCodeData(stallId,this.searchStallCode);
          	}
          }
        }
    }
</script>


<style lang="less">
    @import '../style/mixin';
    @import '../style/common';
    @import '../style/commodityMnagement';
    .el-form-item__content {
        position: static;
    }
    .avatar-uploader .el-upload {
	    border: 1px dashed #d9d9d9;
	    border-radius: 6px;
	    cursor: pointer;
	    position: relative;
	    overflow: hidden;
	  }
	  .avatar-uploader .el-upload:hover {
	    border-color: #409EFF;
	  }
	  .avatar-uploader-icon {
	    font-size: 28px;
	    color: #8c939d;
	    width: 130px;
	    height: 130px;
	    line-height: 130px;
	    text-align: center;
	  }
	  .avatar {
	    width: 130px;
	    height: 130px;
	    display: block;
	  }
</style>