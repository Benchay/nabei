<template>
    <div class="fillcontain">
        <ul class="menu">
            <li class="menuIndex2">
                <router-link :to='{path:"/salesReturn"}'>退货管理</router-link>
            </li>
        </ul>
        <div class="promptlyReturns radioRed">
            <el-col :span="10" class="isLeft">
                <el-col :span="24" class="leftList leftList2">
                    <div class="flex">
                        <el-col :span="4" class="title">货号：</el-col>
                        <el-col :span="19" class="content" style="width:300px">
                            <el-input icon="search" v-model="productCode" placeholder="请输入货号..." :on-icon-click="searchPurchaseProduct"></el-input>
                        </el-col>
                    </div>
                    <el-col :span="4">&nbsp;</el-col>
                    <el-col :span="19" class="content">
                        <div class="contentInfo flex">
                            <img :src="imgUrl_main" alt="">
                            <div class="infoRight">
                                <p>库存(件)：{{this.totalStockNum}}</p>
                                <p>单价(元)：{{this.price}}</p>
                                <p>供货档口：{{this.stallName}}</p>
                            </div>
                        </div>
                    </el-col>
                </el-col>
                <el-col :span="24" class="flex leftList">
                    <el-col :span="4" class="title">颜色：</el-col>
                    <el-col :span="18" class="content" v-show="colors.length > 0">
                        <el-radio-group v-model="radio3" @change="selectColor">
                            <el-radio-button :label="item.value" v-for="item in colors" >{{item.value}}</el-radio-button>
                        </el-radio-group>
                    </el-col>
                </el-col>
                <el-col :span="24" class="flex leftList">
                    <el-col :span="4" class="title">尺码：</el-col>
                    <el-col :span="18" class="content" v-show="sizes.length > 0">
                        <el-radio-group v-model="radio4" @change="selectSize">
                            <el-radio-button :label="item.value" v-for="item in sizes" >{{item.value}}</el-radio-button>
                        </el-radio-group>
                    </el-col>
                </el-col>
                <el-col :span="24" class="flex leftList">
                    <el-col :span="4" class="title">数量：</el-col>
                    <el-col :span="18" class="content">
                        <el-input-number v-model="totalStockNum1" :min="1" :max="this.totalStockNum"></el-input-number>
                    </el-col>
                </el-col>
                <el-col :span="24" class="flex leftList">
                    <el-col :span="4" class="title">退货价格：</el-col>
                    <el-col :span="18" class="content">
                        <div style="width: 180px;">
                            <el-input placeholder="" v-model="purchasePrice" @blur="editPurchaseFun(purchasePrice)">
                                <template slot="prepend">￥</template>
                            </el-input>
                        </div>
                    </el-col>
                </el-col>
                <el-col :span="24" class="flex2 leftButton">
                    <a href="javascript:void(0)" class="buttonColor3" @click="addToList">加入退货清单</a>
                </el-col>
            </el-col>
            <el-col :span="14" class="isRight">
                <div>退货清单</div>
                <!--<div class="rightDelete right"><a href="javascript:void(0)"  class="buttonColor3" @click="batchDeleteConfig">删除</a></div>-->
                <el-table
                    :data="tableData"
                    class="rightTable"
                    show-summary
                    @selection-change="handleSelectionChange"
                    height="400"
                    style="width: 100%">
                    <el-table-column
                        width="40">
                        <template scope="scope">
                            <div class="flex2" @click="batchDeleteConfig(scope.$index)">
                                <img src="../image/delete02.png" alt="">
                            </div>
                        </template>
                    </el-table-column>
                    <el-table-column
                        width="150"
                        label="主图/货号">
                        <template scope="scope">
                            <div class="flex tableFirst">
                                <img :src="scope.row.imgUrl_main" alt=""  class="tableImg">
                                <p>{{scope.row.productCode}}</p>
                            </div>
                        </template>
                    </el-table-column>
                    <el-table-column
                        prop="color"
                        v-model="color"
                        label="颜色">
                    </el-table-column>
                    <el-table-column
                        prop="size"
                        v-model="size"
                        label="尺码">
                    </el-table-column>
                    <el-table-column
                        prop="requireCnt"
                        v-model="orderNum"
                        label="数量">
                    </el-table-column>
                    <el-table-column
                        prop="price"
                        v-model="closeFee"
                        label="金额">
                    </el-table-column>
                    <el-table-column
                        prop="stallName"
                        v-model="stallName"
                        label="档口">
                    </el-table-column>
                </el-table>
                <!--<div class="tips">-->
                    <!--<p>*提示：</p>-->
                    <!--<p>1.商品默认显示档口当前在售价，价格有变动可自行协商档口，手动调整！<br/>-->
                        <!--2.点击开始匹配后，系统会自动匹配档口</p>-->
                <!--</div>-->
                <el-col :span="24" class="flex2 payButton">

                    <a href="javascript:void(0)" class="buttonColor3" @click="confirmSalesReturn">确认</a>

                </el-col>
            </el-col>
        </div>
    </div>
</template>
<script>
    import {querySellerProduct,salesReturnByHand,querySalesReturnOrderListPC,deleteReturnRequire,salesReturnListEnter,createReturnRequire,queryReturnRequire,getReturnRequire} from '@/api/getData'
    import {userInfo,getStore,setStore} from  '../config/mUtils'
    export default {
        data() {
            return {
            	imgUrl_main:'',
            	id:0,
                radio3:'',
                radio4:'',
                radio5:'',
                totalStockNum:0,
                totalStockNum1:0,
                productCode:'',
                price:1,
                stallName:'',
                orderNum:'',
                productInfo:'',
                closeFee:'',
                productId:'',
                productVariantId:'',
                multipleSelection:[],
                tableData:[],
                color:'',
                size:'',
                colors:[],
                sizes:[],
                companyId:'',
                stallId:'',
                vmStallId:'',
                myvmstallId:'',
                stockNum:'',
                pagesize:10,
                currentPage:1,
                array:[],
                purchasePrice:'',
                roleForm: {
                    userId: '',
                    roleId: '',
                    compId:''
                },

            }
        },
        watch:{
            '$route':function (route) {
            this.initData();
            }
        },
        mounted(){
        	this.initData();
        },
        methods: {
            handleSelectSupplier(){
                this.dialogVisible = true;
            },
            isShow(){
                this.queryProductInfo();
            },
            async initData(){
                this.roleForm.userId=userInfo().userId;
                this.roleForm.compId = userInfo().companyId;
                let param = {
                    "companyId":this.roleForm.compId,
                    "resultCfg":{"groupbystall":"1"},
                    "pageIndex":1,
                    "pageSize":10,
                };
                const res = await queryReturnRequire(param);
                if (res.isSuccess == true){
                    this.tableData = [];
                    let table = res.result.results;
                    table.forEach((obj)=>{
                        for(var i= 0;i<obj.requires.length;i++){
                            this.tableData.push(obj.requires[i]);
                        }
                    })

//                    this.tableData = res.result.results;
                    this.totalCount = table.totalCount;
                }
            },
            async searchPurchaseProduct(){
                if(this.productCode==undefined||this.productCode==''){
                    this.$message({
                        duration:this.GLOBAL.MESSAGE_DISSMISS_TIME_MID,
                        type:'error',
                        message:'请先输入要搜索的商品货号'
                    });
                    return ;
                }
//                var currentComp=getStore("curCompany");
//                this.roleForm.compId = currentComp.id;
                this.colors = [];
                this.sizes = [];
               //搜索商品货号
                let param = {
                    "productCode":this.productCode,
                    "companyId":this.roleForm.compId,
                    "pageIndex":1,
                    "pageSize":10,
                    "type":2
                };
                const res = await querySellerProduct(param);
                if(res.isSuccess){
                    this.productInfo = res.result.results;
                    let selResultObj = res.result.results[0];
                    console.log(selResultObj)
                    let table = selResultObj.productVariant;
                    if(this.imgUrl_main == "" && selResultObj.imgUrl_main){
                        	this.imgUrl_main = selResultObj.imgUrl_main;
                        }
                    let totalStock = 0;
                    for(let i = 0 ;i<table.length;i++){
                    	totalStock = totalStock + table[i].stockNum;
                        let color = {
                            value:table[i].colour,
                            label:i
                        }

                        let size = {
                            value:table[i].size,
                            label:i
                        }
                        if(!this.distinctColor(table[i].colour)){
                            this.colors.push(color);
                        }

                        if(!this.distinctSize(table[i].size)){
                            this.sizes.push(size);
                        }
                    }
                    this.totalStockNum = totalStock;
                    this.price = selResultObj.sellPrice;
                    this.stallName = selResultObj.stallName;
                    this.purchasePrice = selResultObj.sellPrice;
                    this.stallId =  selResultObj.stallId;
                    this.myvmstallId = selResultObj.vmstallId;
//                    if( selResultObj.vmstallId !=null){
//                        this.myvmstallId = selResultObj.vmstallId;
//                    }
                    //alert(this.myvmstallId)
                }else{
                    this.$message({
                        duration:this.GLOBAL.MESSAGE_DISSMISS_TIME_MID,
                        type:'error',
                        message:res.errorMsg
                    });
                }
            },
            selectColor(){
                this.sizes=[];
//                console.log(this.sizes);
                var table = this.productInfo;
                table.forEach((obj)=>{
                    for(var i= 0;i<obj.productVariant.length;i++){
                        if( obj.productVariant[i].colour == this.radio3){
                            if(i == 0){
                                this.sizes=[];
                            }
                            console.log(obj.productVariant[0].colour)
                            let size = {
                                label:i,
                                value:obj.productVariant[i].size
                            };
                            this.sizes.push(size);
                        }
                    }
                })

            },
            selectSize(){
                let table = this.productInfo;
                table.forEach((obj)=>{
                    for(var i= 0;i<obj.productVariant.length;i++){
                        if(obj.productVariant[i].colour==this.radio3&&obj.productVariant[i].size==this.radio4)
                        {
                            this.productId = obj.productVariant[i].productId;
                            this.productVariantId = obj.productVariant[i].id;
                            this.pdCode = obj.productVariant[i].productCode;
                            //this.stallId = this.productInfo.stallId;
                            this.totalStockNum = this.productInfo.stockNum
                            if(this.productInfo.vmstallStatus==1){
                                this.stallType = 0;//线上的档口
                            }else {
                                this.stallType = 1;//线下的档口
                            }
                        }
                    }
                })
            },
            async editPurchaseFun(value){
                if(isNaN(value)){
                    this.$message({
                        type: 'error',
                        message: '请输入正确的数字'
                    });
                    return;
                }
                var check=Number(value);
                if(check<1 || check> 9999999){
                    this.$message({
                        type: 'error',
                        message: '请输入1-9999999之间的数字'
                    });
                    return;
                }
            },
            async addToList(){
                if(this.totalStockNum1==0){
                    this.$message({
                        duration:this.GLOBAL.MESSAGE_DISSMISS_TIME_MID,
                        type:'info',
                        message:'请选择规格'
                    });
                    return;
                }else if(this.purchasePrice == '' || this.purchasePrice == 0){
                    this.$message({
                        duration:this.GLOBAL.MESSAGE_DISSMISS_TIME_MID,
                        type:'info',
                        message:'请填写退货价格'
                    });
                    return;
                }
                let param = {
                    "productId":this.productId,
                    "requireCnt":this.totalStockNum1,
                    "companyId":this.roleForm.compId,
                    "productCode":this.productCode,
                    "productVariantId":this.productVariantId,
                    "color":this.radio3,
                    "size":this.radio4,
                    "price":this.purchasePrice,
                    "stallType":0,
                    "stallId":this.stallId,
                    "vmstallId":this.myvmstallId
                };
                this.salesReturnByHand(param);
            },
            async salesReturnByHand(param){

                const res = await createReturnRequire(param);
                if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: res.result.msg
                    });
                    //this.initloadData();
                    this.initData();
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
            },
             distinctColor(val){
                for(let i=0;i< this.colors.length;i++){
                    let item = this.colors[i];
                    if(item.value == val){
                        return true;
                    }
                }
                return false;
            },
             distinctSize(val){
                for(let i=0;i< this.sizes.length;i++){
                    let item = this.sizes[i];
                    if(item.value == val){
                        return true;
                    }
                }
                return false;
            },
             //多选响应
            handleSelectionChange: function(val) {
                this.multipleSelection = val;
            },
             batchDeleteConfig(index) {
//                if(this.multipleSelection == undefined || this.multipleSelection.length==0){
//                    this.$message({
//                        type: 'error',
//                        message: '请先勾选要删除的行！'
//                    });
//                    return;
//                }
//                this.array=[];
//                let ids='';
//                for(let i=0;i<this.multipleSelection.length;i++){
//                	if(i==this.multipleSelection.length-1){
//                		ids += this.multipleSelection[i].orderDetailId;
//                	}else{
//                		ids += this.multipleSelection[i].orderDetailId + ',';
//                	}
//                }
//                this.array.push(ids);
//                if(array.length <1){
//                    this.$message({
//                        type: 'error',
//                        message: '请先勾选要删除的行！'
//                    });
//                    return;
//                }
                this.$confirm('是否确认删除选中的信息?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    this.batchDelete(index);
                }).catch(() => {

                });
                if(this.tableData.length==0){
                    this.userId='';
                }
            },
             async batchDelete(index){
                var deleid=this.tableData[index].id;
                console.table(this.tableData[index]);
                let param = {
                	"requireId":deleid
                }

                const res = await deleteReturnRequire(param);
        		if (res.isSuccess == true) {
	                this.$message({
	                    type: 'success',
	                    message: res.result.msg
	                });
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
                this.initData();
//                 this.$router.go(0)

            },
             contains(array,str){
                for(let i=0;i<array.length;i++){
                    if(array[i] == str){
                        return true;
                    }
                }
                return false;
            },
            confirmSalesReturn(){

//            	this.$router.push({path: '/promptlyReturnsAffirm',query:{data:this.multipleSelection}});
                this.$router.push({path: '/promptlyReturnsAffirm',query:{stallId:this.stallId,}});
            }
        },
        watch:{
            '$route':function (route) {

            }
        },

    }
</script>
<style lang="less">
    @import '../style/mixin';
    @import '../style/common';
    @import '../style/salesReturn';
</style>
