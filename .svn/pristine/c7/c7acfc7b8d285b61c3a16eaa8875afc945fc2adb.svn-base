<template>
    <div class="fillcontain">
        <ul class="menu">
            <li>
                <router-link :to='{path:"/stallProductManagement"}'>商品管理</router-link>
            </li>
            <li  class="menuIndex">
                <router-link :to='{path:"/classificationGoods"}'>商品分类</router-link>
            </li>
            <li>
                <router-link :to='{path:"/"}'>商品统计</router-link>
            </li>
        </ul>
        <div class="product">
            <router-link :to='{path:"/classificationGoods"}' class="comeBack right">返回</router-link>
            <div class="flex productTop">
                <el-input
                    size="small"
                    placeholder="供应商搜索"
                    icon="search"
                    v-model="supplierName"
                    :on-icon-click="initloadData">
                </el-input>
                <el-input
                    size="small"
                    placeholder="货号搜索"
                    icon="search"
                    v-model="productCode"
                    :on-icon-click="initloadData">
                </el-input>
            </div>
            <div class="productButton" style="margin-top: 15px">
                <!--<a href="javascript:void(0)" class="buttonColor" @click="dialogVisible3 = true">+添加分类</a>-->
                <a href="javascript:void(0)" class="buttonColor"  @click="batchDeleteConfig">批量删除</a>
                <el-select v-model="productCatalog" @change="checkProductCatalog" placeholder="分类至" style="width: 100px;" size="small">
                    <el-option
                        v-for="item in options"
                        :key="item.id"
                        :label="item.name"
                        :value="item.id">
                    </el-option>
                </el-select>
            </div>
            <div class="productTable">
                <p class="title">{{catalogName}}列表：</p>
                <el-table
                    :data="tableData"
                    @selection-change="handleSelectionChange"
                    style="width: 100%">
                    <el-table-column
                        type="selection"
                        width="55">
                    </el-table-column>
                    <el-table-column
                        label="主图/货号">
                        <template scope="scope">
                            <div class="flex2 tableFirst" style="justify-content: start;">
                                <img src="../image/111.png" alt=""  class="tableImg">
                                <p>{{tableData[scope.$index].productCode}}</p>
                            </div>
                        </template>
                    </el-table-column>
                    <el-table-column
                        prop="supplierName"
                        label="供应商">
                    </el-table-column>
                    <el-table-column
                        prop="catelogName"
                        label="类别">
                    </el-table-column>
                    <el-table-column
                        prop="sellPrice"
                        label="销售价">
                    </el-table-column>
                    <el-table-column
                        prop="stockNum"
                        label="库存数">
                    </el-table-column>
                    <el-table-column
                        prop="lastWeek"
                        label="最近一周销量">
                    </el-table-column>
                    <!--<el-table-column
                        width="250"
                        label="操作">
                        <template scope="scope">
                            <div class="tableFoot">
                                <a href="javascript:void(0)" class="blue2" @click="dialogVisible = true">下架</a>
                                <a href="javascript:void(0)" class="blue2" @click="dialogVisible2 = true">添加工厂</a>
                                <a href="javascript:void(0)" class="blue2" @click="dialogVisible1 = true">设置仓位</a>
                            </div>
                        </template>
                    </el-table-column>-->
                </el-table>
            </div>
            <el-pagination
                small
                class="right"
                style="margin-top: 20px;"
                @size-change="handleSizeChange"
                @current-change="handleCurrentChange"
                :current-page="currentPage"
                :page-sizes="[10, 20, 30, 40]"
                :page-size="pagesize"
                layout="total, sizes, prev, pager, next, jumper"
                :total="totalCount">
            </el-pagination>
            <a href="javascript:void(0)" class="export_excle">导出excel</a>
        </div>
        <el-dialog
            title="添加分类"
            :visible.sync="dialogVisible3"
            size="tiny"
            >
            <div>
                <el-input
                    placeholder="请输入分类名称..."
                    v-model="addCatalogName"
                    :on-icon-click="handleIconClick">
                </el-input>
            </div>
            <span slot="footer" class="dialog-footer flex2">
                <a href="javascript:void(0)" @click="addProductCatalog" class="buttonColor">确 定</a>
                <a href="javascript:void(0)" @click="dialogVisible3 = false" class="buttonColor2">取 消</a>
              </span>
        </el-dialog>
        <el-dialog
            title="产品下架"
            :visible.sync="dialogVisible"
            size="tiny">
            <div>
                是否下架该商品？
            </div>
            <span slot="footer" class="dialog-footer flex2">
                <a href="javascript:void(0)" @click="dialogVisible = false" class="buttonColor">确 定</a>
                <a href="javascript:void(0)" @click="dialogVisible = false" class="buttonColor2">取 消</a>
              </span>
        </el-dialog>
        <el-dialog
            title="设置仓位"
            :visible.sync="dialogVisible1"
            size="tiny">
            <div>
                <div class="flex2">
                    <el-col :span="5" v-for="list in warehouseList" class="radioGreen">
                        <el-radio class="radio" v-model="radio" :label="list.label" >{{list.list}}</el-radio>
                    </el-col>
                </div>
            </div>
            <span slot="footer" class="dialog-footer flex2">
                <a href="javascript:void(0)" @click="dialogVisible1 = false" class="buttonColor">确 定</a>
                <a href="javascript:void(0)" @click="dialogVisible1 = false" class="buttonColor2">取 消</a>
              </span>
        </el-dialog>
        <el-dialog
            title="添加工厂"
            :visible.sync="dialogVisible2"
            size="tiny">
            <div style="width:100%;overflow: hidden">
                <el-form :model="ruleForm" ref="ruleForm" label-width="130px">
                    <el-col :span="24">
                        <el-form-item label="工厂名称：">
                            <el-input v-model="ruleForm.name"  placeholder="请输入工厂名称..."></el-input>
                        </el-form-item>
                    </el-col>
                    <el-col :span="24">
                        <el-form-item label="进价：">
                            <el-input v-model="ruleForm.number" placeholder="请输入进货价..."></el-input>
                        </el-form-item>
                    </el-col>
                </el-form>
            </div>
            <span slot="footer" class="dialog-footer flex2">
                <a href="javascript:void(0)" @click="dialogVisible2 = false" class="buttonColor">确 定</a>
                <a href="javascript:void(0)" @click="dialogVisible2 = false" class="buttonColor2">取 消</a>
              </span>
        </el-dialog>
    </div>
</template>

<script>
    import headTop from '../components/headTop'
    import {getProductByCatalog,addProductCatalog,getProductCatalogByParam,batchUpdateProductCatalog} from '@/api/getData'
	import {userInfo} from  '../config/mUtils'

    export default {
        components: {
            headTop,
        },
        data() {
            return {
            	catalogId:'',

            	productCatalog:'',

            	addCatalogName:'',

            	supplierName:'',

            	catalogName:'',

            	productCode:'',

            	//默认每页数据量
                pagesize: 10,
                //当前页码
                currentPage: 1,

                totalCount:0,

                input2:'',
                dialogVisible:false,
                dialogVisible1:false,
                dialogVisible2:false,
                dialogVisible3:false,
                tableData: [],
                form: {
                    name: '',
                    region: '',
                    type: '',
                    telephone:''
                },
                options: [],
                value: '',
                warehouseList:[
                    {
                        label:1,
                        list:'仓位1'
                    },
                    {
                        label:2,
                        list:'仓位2'},
                    {
                        label:3,
                        list:'仓位3'},
                ],
                radio:1,
                ruleForm: {
                    name: '',
                    number:'',
                },

            }
        },
        mounted(){
        	this.catalogId = this.$route.query.catalogId;
        	this.catalogName = this.$route.query.catalogName;
            this.initloadData();
            this.initloadCatalogData();
        },
        watch:{
           '$route':function (route) {
               this.catalogId = this.$route.query.catalogId;
               this.catalogName = this.$route.query.catalogName;
               this.initloadData();
           }
        },
        methods: {
        	async initloadData(){
        		this.tableData = [];
				let param ={
            		pageIndex:this.currentPage,
    				pageSize:this.pagesize,
    				productCatalogId:this.catalogId,
    				supplierName:this.supplierName,
    				productCode:this.productCode
            	}
				const res = await getProductByCatalog(param);
                if (res.isSuccess == true) {
                	this.tableData = res.result.results;
                	if(this.currentPage == 1){
                		this.totalCount =  res.result.totalCount;
                	}
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
            },

            //从服务器获取数据
            async initloadCatalogData() {
            	this.tableData = [];
            	let param ={
            		companyId:userInfo().companyId,
            		pageIndex:1,
    				pageSize:this.pagesize
            	}
                const res = await getProductCatalogByParam(param);
                if (res.isSuccess == true) {
                	this.options = res.result.results;
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
            },

            handleIconClick(){
                console.log(1)
            },
            handleSizeChange(val) {
                console.log(`每页 ${val} 条`);
            },
            handleCurrentChange(val) {
                console.log(`当前页: ${val}`);
            },

            async addProductCatalog(){
				let param = {
					name:this.addCatalogName,
					companyId:userInfo().companyId
				};
              	const res = await addProductCatalog(param);
                if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: res.result.msg
                    });
                     this.dialogVisible3 = false;
                     this.initloadData();
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
          },

            //多选响应
            handleSelectionChange: function(val) {
                this.multipleSelection = val;
            },

            batchDeleteConfig() {
		    	if(this.multipleSelection == undefined || this.multipleSelection.length==0){
		    		this.$message({
                        type: 'error',
                        message: '请先勾选要删除的商品！'
                    });
                    return;
		    	}
                var array = [];
                this.multipleSelection.forEach((item) => {
                    array.push(item.id);
                })
                if(array.length <1){
                	this.$message({
                        type: 'error',
                        message: '请先勾选要删除的商品！'
                    });
                    return;
                }
		        this.$confirm('是否确认删除选中的商品?', '提示', {
		          confirmButtonText: '确定',
		          cancelButtonText: '取消',
		          type: 'warning'
		        }).then(() => {
		          this.batchDelete(array);
		        }).catch(() => {

		        });
		    },

		    async batchDelete(array){
                let param = {
                	productIds:array
                }
                const res = await batchDeleteProductForStall(param);
            	if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: res.result.msg
                    });
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
                this.initloadData();

            },

            checkProductCatalog(){
            	if(this.productCatalog == ''){
            		return;
            	}
            	if(this.multipleSelection == undefined || this.multipleSelection.length==0){
		    		this.$message({
                        type: 'error',
                        message: '请先勾选要修改的商品！'
                    });
                    this.productCatalog = '';
                    return;
		    	}
                var array = [];
                this.multipleSelection.forEach((item) => {
                    array.push(item.id);
                })
                if(array.length <1){
                	this.$message({
                        type: 'error',
                        message: '请先勾选要修改的商品！'
                    });
                    this.productCatalog = '';
                    return;
                }
		        this.$confirm('是否确认修改选中的商品?', '提示', {
		          confirmButtonText: '确定',
		          cancelButtonText: '取消',
		          type: 'warning'
		        }).then(() => {
		          this.batchUpdate(array);
		        }).catch(() => {
					this.productCatalog = '';
		        });
           },

           async batchUpdate(array){
                let param = {
                	productIds:array,
                	productCatalogId:this.productCatalog
                }
                const res = await batchUpdateProductCatalog(param);
                this.productCatalog = '';
            	if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: res.result.msg
                    });
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
                this.initloadData();

            },

        }
    }
</script>

<style lang="less">
    @import '../style/mixin';
    @import '../style/common';
    @import '../style/stallProductManagement';
</style>
