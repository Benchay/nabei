<template>
    <div class="fillcontain">
        <ul class="menu">
            <li>
                <router-link :to='{path:"/stallManage"}'>档口管理</router-link>
            </li>
            <li class="menuIndex2">
                <router-link :to='{path:"/stallSettlement"}'>档口结算</router-link>
            </li>
            <li>
                <router-link :to='{path:"/SettlementRecords"}'>结算单</router-link>
            </li>
        </ul>
        <div class="sellerSettlement">
            <div class="settlementContent stallContent">
                <p class="title">立即结算</p>
                <el-tabs v-model="activeName" @tab-click="handleClick">
                    <el-tab-pane label="发起收款" name="first" v-if="activeName == 'first'">
                        <div class="gathering">
                            <el-col :span="12">
                                <el-col :span="6" class="listTitle">档口名称：</el-col>
                                <el-col :span="18" class="tkList">{{stallName}}</el-col>
                            </el-col>
                            <el-col :span="12" class="flex">
                                <el-col :span="6" class="listTitle">退款（元）：</el-col>
                                <el-col :span="18"  class="flex tkList tkList1">
                                    <p>0.00</p>
                                    <el-switch
                                        v-model="value3"
                                        class="swich-on"
                                        on-color="#da444f"
                                        off-color="#999"
                                        on-text="开"
                                        off-text="关">
                                    </el-switch>
                                    <p>（打开开关，收款自动抵扣退款金额）</p>
                                </el-col>
                            </el-col>
                            <el-col :span="12">
                                <el-col :span="6" class="listTitle">当前总欠款（元）：</el-col>
                                <el-col :span="18"  class="tkList">
                                    <p>{{totalFee}}</p>
                                </el-col>
                            </el-col>
                            <el-col :span="12">
                                &nbsp;
                                <!--<el-col :span="6" class="listTitle">到期欠款（元）：</el-col>-->
                                <!--<el-col :span="18"  class="tkList">-->
                                    <!--<p>2000.00</p>-->
                                <!--</el-col>-->
                            </el-col>
                            <el-col :span="12" class="flex">
                                <el-col :span="6" class="listTitle"><i>*</i>实收金额：</el-col>
                                <el-col :span="18"  class="tkList">
                                    <el-input v-model="firstActualPayFee" placeholder="请输入" class="input1"></el-input>
                                </el-col>
                            </el-col>
                            <el-col :span="12" class="flex">
                                <el-col :span="6" class="listTitle">抹平金额：</el-col>
                                <el-col :span="18"  class="tkList">
                                    <el-input v-model="fixFee" placeholder="请输入" class="input1"></el-input>
                                </el-col>
                            </el-col>
                            <el-col :span="12" class="flex">
                                <el-col :span="6" class="listTitle">是否现结：</el-col>
                                <el-col :span="18"  class="tkList">
                                    <el-select v-model="value1" placeholder="请选择">
                                        <el-option
                                            v-for="item in optionss"
                                            :key="item.value"
                                            :label="item.label"
                                            :value="item.value">
                                        </el-option>
                                    </el-select>
                                </el-col>
                            </el-col>
                            <el-col :span="24">
                                <el-col :span="3" class="listTitle">收款说明：</el-col>
                                <el-col :span="18"  class="tkList">
                                    <el-input
                                        type="textarea"
                                        :autosize="{ minRows: 2, maxRows: 4}"
                                        placeholder="请输入备注"
                                        v-model="firstMemo">
                                    </el-input>
                                </el-col>
                            </el-col>
                            <el-col :span="24" class="flex2">
                                <a href="javascript:void(0)" class="buttonColor3" @click="startCollect">发起</a>
                                <a href="javascript:void(0)" class="buttonColor2">取消</a>
                            </el-col>
                        </div>
                    </el-tab-pane>
                    <el-tab-pane label="发起付款" name="second"  v-if="activeName == 'second'">
                        <div class="payment">
                            <el-col :span="12">
                                <el-col :span="6" class="listTitle">档口名称：</el-col>
                                <el-col :span="18" class="tkList">{{otherSideCompanyName}}</el-col>
                            </el-col>
                            <el-col :span="12" class="flex">
                                <el-col :span="6" class="listTitle">退款（元）：</el-col>
                                <el-col :span="18"  class="flex tkList tkList1">
                                    <p>0.00</p>
                                </el-col>
                            </el-col>
                            <el-col :span="24" class="flex">
                                <el-col :span="3" class="listTitle"><i>*</i>付款金额：</el-col>
                                <el-col :span="18"  class="tkList">
                                    <el-input v-model="actualPayFee" placeholder="请输入" class="input1" :disabled="isModify"></el-input>
                                </el-col>
                            </el-col>
                            <el-col :span="12" class="flex">
                                <el-col :span="6" class="listTitle"><i>*</i>选择付款类型：</el-col>
                                <el-col :span="18"  class="tkList">
                                    <el-select v-model="value" placeholder="请选择" class="tkList2" @change="changeAccounts">
                                        <el-option
                                            v-for="item in options"
                                            :key="item.value"
                                            :label="item.label"
                                            :value="item.value">
                                        </el-option>
                                    </el-select>
                                </el-col>
                            </el-col>
                            <el-col :span="12" class="flex"  v-if="this.value > 1">
                                <el-col :span="6" class="listTitle"><i>*</i>选择付款账户：</el-col>
                                <el-col :span="18"  class="tkList">
                                    <el-select v-model="payAcount" placeholder="请选择" class="tkList2" >
                                        <el-option
                                            v-for="item in selfAccounts"
                                            :key="item.value"
                                            :label="item.value"
                                            :value="item.value">
                                        </el-option>
                                    </el-select>
                                </el-col>
                            </el-col>
                            <el-col :span="12" class="flex"  v-if="this.value>1">
                                <el-col :span="6" class="listTitle"><i>*</i>选择收款账户：</el-col>
                                <el-col :span="18"  class="tkList">
                                    <el-select v-model="reciveAcount" placeholder="请选择" class="tkList2" >
                                        <el-option
                                            v-for="item in stallAccounts"
                                            :key="item.value"
                                            :label="item.value"
                                            :value="item.value">
                                        </el-option>
                                    </el-select>
                                </el-col>
                            </el-col>
                            <el-col :span="24" class="flex" v-if="this.value>1">
                                <!--最多上传三张凭证-->
                                <el-col :span="3" class="listTitle">上传凭证：</el-col>
                                <el-col :span="18"  class="tkList">
                                    <el-upload
                                        action="https://jsonplaceholder.typicode.com/posts/"
                                        list-type="picture-card"
                                        :on-preview="handlePictureCardPreview"
                                        :on-remove="handleRemove">
                                        <i class="el-icon-plus"></i>
                                    </el-upload>
                                    <el-dialog v-model="dialogVisible" size="tiny">
                                        <img width="100%" :src="dialogImageUrl" alt="">
                                    </el-dialog>
                                </el-col>
                            </el-col>
                            <el-col :span="24">
                                <el-col :span="3" class="listTitle">收款说明：</el-col>
                                <el-col :span="18"  class="tkList">
                                    <el-input
                                        type="textarea"
                                        :autosize="{ minRows: 2, maxRows: 4}"
                                        placeholder="请输入备注"
                                        v-model="memo">
                                    </el-input>
                                </el-col>
                            </el-col>
                            <el-col :span="24" class="flex2">
                                <el-button class="buttonColor3" @click="handleStart" :disabled="isStarted">发起</el-button>
                                <a href="javascript:void(0)" class="buttonColor2">取消</a>
                            </el-col>
                        </div>
                    </el-tab-pane>
                </el-tabs>
            </div>
        </div>
    </div>
</template>

<script>
    import {getSettlementOrder,queryPlatformAccount,walletFeeforward,createOffLineFinanceRecord,payForSettlementOrder,saveSettlementOrder,
        getOrder,getSettlement
    } from '@/api/getData'
    import {userInfo} from '../config/mUtils.js'

    export default {
        data() {
            return {
                value3:false,
                activeName:'first',
                options: [{
                    value: 1,
                    label: '余额'
                }, {
                    value: 3,
                    label: '支付宝'
                }, {
                    value: 4,
                    label: '微信'
                }, {
                    value: 5,
                    label: '银行卡'
                }],
                value: 1,
                optionss:[{
                    value: 0,
                    label: '否'
                }, {
                    value: 1,
                    label: '是'
                }],
                value1:0,
                options2: [],
                value2: '1',
                dialogImageUrl: '',
                dialogVisible: false,
                otherSideCompanyName:'',
                actualPayFee:0,
                actualPayFeeType:0,
                payAcount:'',
                reciveAcount:'',
                settlementOrderId:'',
                isModify:false,
                saleCompanyId:'',
                stallAccounts:[],
                selfAccounts:[],
                selfAccountsTemp:[],
                stallAccountsTemp:[],
                isStarted:false,
                memo:'',
                settlementOrder:'',
                settlementOrders:[],
                totalDebtFee:0,

                saleOrderId:'',
                stallName:'',
                totalFee:0,
                firstMemo:'',
                fixFee:0,
                payFee:0,
                firstActualPayFee:0,

            }
        },
        watch:{
            '$route': function (route) {
//                this.$route.go(0);
                this.saleCompanyId = this.$route.query.saleCompanyId;
                this.otherSideCompanyName = this.$route.query.otherSideCompanyName;
                this.activeName = this.$route.query.activeName;
                if(this.activeName==undefined||this.activeName==''){
                    var type = this.$route.query.type;
                    if(type==1){
                        this.activeName = 'second';
                    }else if(type==2){
                        this.activeName = 'first';
                    }
                }
//            var type = this.$route.query.type;
//            if(type==1){
//                this.activeName = 'second';
//            }else if(type==2){
//                this.activeName = 'first';
//            }
                this.settlementOrderId = this.$route.query.settlementOrderId;
                this.settlementOrders = this.$route.query.orderIds;
                if(this.settlementOrderId!=undefined&&this.settlementOrderId!=''){
                    this.isModify = true;
                    this.loadSettlementOrderInfo();//记载结算单
                }else{
                    this.isModify = false;
                    this.actualPayFee = this.$route.query.unClosedFee;
                    this.totalDebtFee = this.$route.query.unClosedFee;
                }

                //查询财务账户
                this.queryAccounts();
                //检查余额
                this.remoteMethod();

                //发起收款部分
                this.saleOrderId = this.$route.query.salesId;
                if(this.saleOrderId!=undefined&&this.saleCompanyId!=''){
                    this.initData();
                }
            }
        },
        mounted(){
            this.saleCompanyId = this.$route.query.saleCompanyId;
            this.otherSideCompanyName = this.$route.query.otherSideCompanyName;
            this.activeName = this.$route.query.activeName;
            if(this.activeName==undefined||this.activeName==''){
                var type = this.$route.query.type;
                if(type==1){
                    this.activeName = 'second';
                }else if(type==2){
                    this.activeName = 'first';
                }
            }
//            var type = this.$route.query.type;
//            if(type==1){
//                this.activeName = 'second';
//            }else if(type==2){
//                this.activeName = 'first';
//            }
            this.settlementOrderId = this.$route.query.settlementOrderId;
            this.settlementOrders = this.$route.query.orderIds;
            if(this.settlementOrderId!=undefined&&this.settlementOrderId!=''){
                this.isModify = true;
                this.loadSettlementOrderInfo();//记载结算单
            }else{
                this.isModify = false;
                this.actualPayFee = this.$route.query.unClosedFee;
                this.totalDebtFee = this.$route.query.unClosedFee;
            }

            //查询财务账户
            this.queryAccounts();
            //检查余额
            this.remoteMethod();

            //发起收款部分
            this.saleOrderId = this.$route.query.salesId;
            if(this.saleOrderId!=undefined&&this.saleCompanyId!=''){
                this.initData();
            }


        },
        methods: {
            //查询订单金额
            async loadSettlementOrderInfo(){
                let param = {
                    "settlementOrderId":this.settlementOrderId
                };
                const res = await getSettlementOrder(param);
                if(res.isSuccess){
                    let data = res.result;
                    this.actualPayFee = data.actualPayFee;
                    this.settlementOrder = data;
                    this.otherSideCompanyName = data.otherSideCompanyName;
                }else{
                    this.message({
                        type:'error',
                        message:'查询失败'
                    });
                    return;
                }
            },

            //查询财务账户
            async queryAccounts(){
                if(this.activeName!='second'){
                    return;
                }
                this.selfAccountsTemp = [];
                this.stallAccountsTemp = [];
                let param = {
                    "companyId":userInfo().companyId
                };
                const res = await queryPlatformAccount(param);//查询自己的财务账户
                if(res.isSuccess){
                    let platForm = res.result.financeAccounts;
                    platForm.forEach((obj)=>{
                       let pa = {
                           type:obj.accType,
                           id:obj.platformAccountId,
                           value:obj.accoutNumber
                       };
                        this.selfAccountsTemp.push(pa);
                    });
                }
                let para = {
                    "companyId":this.saleCompanyId
                };
                const re = await queryPlatformAccount(para);//查询对方的财务账户
                if(re.isSuccess){
                    let platfm = re.result.financeAccounts;
                    platfm.forEach((obj)=>{
                        let p = {
                            type:obj.accType,
                            id:obj.platformAccountId,
                            value:obj.accoutNumber
                        };
                        this.stallAccountsTemp.push(p);
                    });
                }
            },

            //检查余额
            async remoteMethod(){
                if(this.activeName!='second'){
                    return ;
                }
                if(this.value==1){
                    let param = {
                        "companyId":userInfo().companyId
                    };
                    const res = await queryPlatformAccount(param);
                    if(res.isSuccess){
                        if(res.result.blance < this.actualPayFee){
                            this.isStarted = true;
                            this.$message({
                                type:'error',
                                message:'您的余额不足，不能发起付款'
                            });
                        }
                    }
                }
            },

            //更换支付方式
            changeAccounts(){
                if(this.value==1){
                    this.remoteMethod();
                }else{
                    this.isStarted = false;
                    var table = [];
                    var table2=[];
                    if(this.value == 3){
                        this.selfAccountsTemp.forEach((obj)=>{
                            if(obj.type==3){
                                table.push(obj);
                            }
                        });
                        this.selfAccounts = table;
                        this.stallAccountsTemp.forEach((obj)=>{
                            if(obj.type == 3){
                                table2.push(obj);
                            }
                        });
                        this.stallAccounts = table2;

                    }else if(this.value == 4){
                        this.selfAccountsTemp.forEach((obj)=>{
                            if(obj.type==4){
                                table.push(obj);
                            }
                        });
                        this.selfAccounts = table;
                        this.stallAccountsTemp.forEach((obj)=>{
                            if(obj.type == 4){
                                table2.push(obj);
                            }
                        });
                        this.stallAccounts = table2;

                    }else if(this.value == 5){
                        this.selfAccountsTemp.forEach((obj)=>{
                            if(obj.type==5){
                                table.push(obj);
                            }
                        });
                        this.selfAccounts = table;
                        this.stallAccountsTemp.forEach((obj)=>{
                            if(obj.type == 5){
                                table2.push(obj);
                            }
                        });
                        this.stallAccounts = table2;
                    }
                }

            },

            //发起结算
            startSettlement(){
                if(this.settlementOrderId!=undefined&&this.settlementOrderId!=''){
                    if(this.value==1){
                        this.balancePay();//余额支付
                    }else{
                        this.onlinePay();//支付宝微信银行卡支付
                    }
                }else if(this.settlementOrders!=undefined&&this.settlementOrders!=''||this.settlementOrders.length!=0){
                    //创建结算单
                    var ids = '[';
                    this.settlementOrders.forEach((obj)=>{
                        ids = ids + obj + ',';
                    });
                    ids = ids.substring(0,ids.length-1);
                    ids = ids + ']';
                    let para = {
                        "stockOrders":ids,
                        "settlementType":2,
                        "totalDebtFee":this.totalDebtFee,
                        "actualPayFee":this.actualPayFee,
                        "reciveAcount":this.reciveAcount,
                        "payAcount":this.payAcount,
                        "payMemo":this.memo,
                        "type":2,
                        "companyId":userInfo().companyId,
                        "otherSideCompanyId":this.saleCompanyId,
                        "isOffLine":1,
                        "certificate":this.dialogImageUrl
                    };
                    this.createSettlementOrder(para);

                }else{
                    let para = {
                        "settlementType":2,
                        "totalDebtFee":this.totalDebtFee,
                        "actualPayFee":this.actualPayFee,
                        "reciveAcount":this.reciveAcount,
                        "payAcount":this.payAcount,
                        "payMemo":this.memo,
                        "type":2,
                        "companyId":userInfo().companyId,
                        "otherSideCompanyId":this.saleCompanyId,
                        "isOffLine":1,
                        "certificate":this.dialogImageUrl
                    };
                    this.createSettlementOrder(para);
                }
            },

            //创建结算单
            async createSettlementOrder(para){
                const res = await saveSettlementOrder(para);
                if(res.isSuccess){
                    if(this.value==1){
                        this.balancePay();//余额支付
                    }else{
                        this.onlinePay();//支付宝微信银行卡支付
                    }
                }else{
                    this.$message({
                        type:'error',
                        message:'操作失败'
                    });
                }
            },
            //余额支付
            async balancePay(){
                let param = {
                    "financeItemCode":1,
                    "memo":this.memo,
                    "orderId":this.settlementOrderId,
                    "accountType":this.value,
                    "recordType":3,
                    "isOnlineRecord":1,
                    "otherCompanyId":this.saleCompanyId,
                    "companyId":userInfo().companyId,
                    "changeFee":this.actualPayFee
                };
                const res = await walletFeeforward(param);
                if(res.isSuccess){
                    this.modifySettlementOrder(); //修改结算单状态
                }else{
                    this.$message({
                        type:'info',
                        message:'操作失败'
                    });
                }

            },

            //支付宝微信银行卡支付
            async onlinePay(){
                let param = {
                    "financeItemCode":1,
                    "ownerAccountId":this.payAcount,
                    "otherAccountId":this.reciveAcount,
                    "memo":this.memo,
                    "companyId":userInfo().companyId,
                    "accountType":this.value,
                    "recordType":3,
                    "changeFee":this.actualPayFee,
                    "otherCompanyId":this.saleCompanyId
                };
                const res = await createOffLineFinanceRecord(param);
                if(res.isSuccess){
                    this.modifySettlementOrder();//修改结算单
                }else{
                    this.$message({
                        type:'error',
                        message:'操作失败'
                    });
                }
            },


            //修改结算单
            async modifySettlementOrder(){
                let para = {
                    "id":this.settlementOrderId,
                    "settlementType":this.settlementOrder.settlementType,
                    "totalDebtFee":this.settlementOrder.totalDebtFee,
                    "payFee":this.settlementOrder.payFee,
                    "fixFee":this.settlementOrder.fixFee,
                    "actualPayFee":this.settlementOrder.actualPayFee,
                    "reciveAcount":this.reciveAcount,
                    "payAcount":this.payAcount,
                    "actualPayFeeType":this.value,
                    "reciveAcountType":this.value,
                    "payMemo":this.memo,
                    "certificate":this.dialogImageUrl,
                    "status":4,
                    "type":2,
                    "companyId":userInfo().companyId,
                    "otherSideCompanyId":this.saleCompanyId,
                    "isOffLine":1
                };
                const re = await payForSettlementOrder(para);
                if(re.isSuccess){
                    this.$message({
                        type:'info',
                        message:'操作成功'
                    });
                }else{
                    this.$message({
                        type:'error',
                        message:'操作失败'
                    });
                }
            },

            //发起付款
            async handleStart(){
                if(this.value!=3){
                    this.isStarted = false;
                }
                if(this.settlementOrderId!=undefined||this.settlementOrderId!=''){
                    let param = {
                        "settlementOrderId":this.settlementOrderId
                    };
                    const res = await getSettlementOrder(param);
                    if(res.isSuccess){
                        if(res.result.status==4){
                            this.$message({
                                type:'error',
                                message:'该结算单已在付款中，不能重复提交'
                            });
                        }else{
                            this.settlementOrder = res.result;
                            this.startSettlement();
                        }
                    }else{
                        this.$message({
                            type:'error',
                            message:'操作失败'
                        });
                    }
                }else{
                    this.startSettlement();
                }
            },
            handleClick(tab, event) {
                console.log(tab, event);
            },
            handleRemove(file, fileList) {
                console.log(file, fileList);
            },
            handlePictureCardPreview(file) {
                this.dialogImageUrl = file.url;
                this.dialogVisible = true;
            },
    //-------------------------------发起收款部分--------------------------------
            async initData(){
                if(this.activeName == 'first'){
                    let param = {
                        "id": this.saleOrderId,
                        "getOrderId": "1"
                    };
                    const res = await getOrder(param);
                    if(res.isSuccess){
                        let data = res.result;
                        this.stallName = data.stallName;
                        this.totalFee = data.totalFee;
                        console.log(data)
                    }
                }
            },
            async startCollect (){
                let param = {
                    "stockOrders":'[' + this.saleOrderId + ']',
                    "companyId":userInfo().companyId,
                    "otherSideCompanyId":'',
                    "memo":this.firstMemo,
                    "type":1,
                    "isOffLine":this.value1,
                    "payFee":this.payFee,
                    "fixFee":this.fixFee,
                    "actualPayFee":this.firstActualPayFee,
                };
                const res = await saveSettlementOrder(param);
                if(res.isSuccess){
                    this.$message({
                        type: 'success',
                        message: '已发起收款！'
                    });
                }
            }
        //-----------------------------------------------------------------------------
        }
    }
</script>

<style lang="less">
    @import '../style/mixin';
    @import '../style/common';
    @import '../style/sellerSettlement';
    .el-upload--picture-card {
        background-color: #fbfdff;
        border: 1px dashed #c0ccda;
        border-radius: 6px;
        box-sizing: border-box;
        width: 78px;
        height: 78px;
        cursor: pointer;
        line-height: 78px;
        vertical-align: top;
    }
</style>
