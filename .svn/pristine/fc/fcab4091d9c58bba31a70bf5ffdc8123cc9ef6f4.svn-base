<template>
    <div class="fillcontain">
        <ul class="menu">
            <li>
                <router-link :to='{path:"/menuManagement"}'>菜单管理</router-link>
            </li>
            <li>
                <router-link :to='{path:"/platformSettings"}'>平台基础配置</router-link>
            </li>
            <li>
                <router-link :to='{path:"/msgParamsConfig"}'>短信参数配置</router-link>
            </li>
            <li class="menuIndex3">
                <router-link :to='{path:"/msgSendInterfaceConfig"}'>短信发送接口配置</router-link>
            </li>
            <li>
                <router-link :to='{path:"/logManagement"}'>日志管理</router-link>
            </li>
        </ul>
        <div class="msgSendInterfaceConfig">
            <div>
                <el-button type="info" @click="showMsgSendInterfaceConfig" size="small">配置短信发送接口</el-button>
                <el-button type="info" @click="batchDelete" size="small">删除</el-button>
            </div>
            <div class="shopList" style="padding-bottom: 80px;" v-show="tableData3.length>0">
                <el-table
                    ref="multipleTable"
                    :data="tableData3"
                    tooltip-effect="dark"
                    @selection-change="handleSelectionChange"
                    style="width: 100%">
                    <el-table-column
                        type="selection"
                        width="55">
                    </el-table-column>
                    <el-table-column
                        prop="platform"
                        label="平台名称"
                        width="200">
                    </el-table-column>
                    <el-table-column
                        prop="sendAccount"
                        label="发送账号"
                        width="100"
                        >
                    </el-table-column>
                    <el-table-column
                        prop="sendStatus"
                        label="是否开启短信发送"
                        width="220"
                        :formatter="formatSendStatus">
                    </el-table-column>

                    <el-table-column
                        prop="money"
                        label="操作"
                        show-overflow-tooltip>
                        <template scope="scope">
                        	<a href="javascript:void(0);" class="color4" @click="editdialog(tableData3[scope.$index])">编辑</a>｜
                            <a href="javascript:void(0);" class="color4" @click="configDelete(tableData3[scope.$index].id)">删除</a>
                        </template>
                    </el-table-column>
                </el-table>
                <el-pagination
                    small
                    class="right"
                    style="margin-top: 20px;"
                    @size-change="handleSizeChange"
                    @current-change="handleCurrentChange"
                    :current-page="currentPage"
                    :page-sizes="[10, 20, 30, 40]"
                    :page-size="pagesize"
                    layout="total, sizes, prev, pager, next, jumper"
                    :total="totalCount">
                </el-pagination>
            </div>
        </div>

        <el-dialog title="短信发送接口配置" :visible.sync="msgSendInterfaceConfigDia">
            <el-form :model="msgSendInterfaceConfigform" :rules="msgSendInterfaceConfigformRule" ref="msgSendInterfaceConfigform">
                <el-form-item label="发送账号 ：" prop="sendAccount" :label-width="formLabelWidth">
                    <el-input v-model="msgSendInterfaceConfigform.sendAccount" placeholder="请输入发送账号 " auto-complete="off" class="add-dialog"></el-input>
                </el-form-item>
                <el-form-item label="发送密码 ：" prop="sendPassword" :label-width="formLabelWidth">
                    <el-input v-model="msgSendInterfaceConfigform.sendPassword" placeholder="请输入发送密码 " auto-complete="off" class="add-dialog"></el-input>
                </el-form-item>
                <el-form-item label="发送平台 ：" prop="platform" :label-width="formLabelWidth">
                    <el-input v-model="msgSendInterfaceConfigform.platform" placeholder="请输入发送平台 " auto-complete="off" class="add-dialog"></el-input>
                </el-form-item>
                <el-form-item label="是否开启短信发送：" :label-width="formLabelWidth">
                    <el-select v-model="msgSendInterfaceConfigform.sendStatus" placeholder="选择是否开户短信发送">
                        <el-option label="开启" value="1"></el-option>
                        <el-option label="关闭" value="2"></el-option>
                    </el-select>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="msgSendInterfaceConfigDia = false">取 消</el-button>
                <el-button type="primary" @click="msgSendInterfaceConfigFormSubmit('msgSendInterfaceConfigform')">确 定</el-button>
            </div>
        </el-dialog>

        <el-dialog title="短信发送接口配置" :visible.sync="editmsgSendInterfaceConfigDia">
            <el-form :model="editMsgSendInterfaceConfigform" :rules="editMsgSendInterfaceConfigformRule" ref="editMsgSendInterfaceConfigform">
            	<el-form-item label="编号：" :label-width="formLabelWidth" style="display: none;">
                    <el-input v-model="editMsgSendInterfaceConfigform.id" auto-complete="off" class="add-dialog"></el-input>
                </el-form-item>
                <el-form-item label="发送账号 ：" prop="sendAccount" :label-width="formLabelWidth">
                    <el-input v-model="editMsgSendInterfaceConfigform.sendAccount" placeholder="请输入发送账号 " auto-complete="off" class="add-dialog"></el-input>
                </el-form-item>
                <el-form-item label="发送密码 ：" prop="sendPassword" :label-width="formLabelWidth">
                    <el-input v-model="editMsgSendInterfaceConfigform.sendPassword" placeholder="请输入发送密码 " auto-complete="off" class="add-dialog"></el-input>
                </el-form-item>
                <el-form-item label="发送平台 ：" prop="platform" :label-width="formLabelWidth">
                    <el-input v-model="editMsgSendInterfaceConfigform.platform" placeholder="请输入发送平台 " auto-complete="off" class="add-dialog"></el-input>
                </el-form-item>
                <el-form-item label="是否开启短信发送：" :label-width="formLabelWidth">
                    <el-select v-model="editMsgSendInterfaceConfigform.sendStatus" placeholder="选择是否开户短信发送">
                        <el-option label="开启" value="1"></el-option>
                        <el-option label="关闭" value="2"></el-option>
                    </el-select>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="editmsgSendInterfaceConfigDia = false">取 消</el-button>
                <el-button type="primary" @click="editmsgSendInterfaceConfigFormSubmit('editMsgSendInterfaceConfigform')">确 定</el-button>
            </div>
        </el-dialog>
    </div>
</template>

<script>
    import headTop from '../components/headTop'
    import {createSendInterfaceConfig,updateMsgConfig,selectMsgConfig,batchDeleteMsgConfig} from '@/api/getData'
    import {userInfo} from  '../config/mUtils'
    import {mydateFormat} from '../utils/dataFormater.js'

    export default {
        components: {
            headTop,
        },
        computed: {
            classObject: function () {
                return {
                    active: this.isActive && !this.error,
                    'text-danger': this.error && this.error.type === 'fatal',
                }
            }
        },
        data() {
            return {
            	msgSendInterfaceConfigformRule:{
            		sendAccount:[
            			{ required: true, message: '发送账号不能为空'},
            		],
            		sendPassword:[
            			{ required: true, message: '发送密码不能为空'},
            		],
            		platform:[
            			{ required: true, message: '发送平台不能为空'},
            		]
            	},
            	editMsgSendInterfaceConfigformRule:{
            		sendAccount:[
            			{ required: true, message: '发送账号不能为空'},
            		],
            		sendPassword:[
            			{ required: true, message: '发送密码不能为空'},
            		],
            		platform:[
            			{ required: true, message: '发送平台不能为空'},
            		]
            	},
                rotate:false,
                bindWebStoreUrl:'www.bai',
                tableData3: [{companyName:''}],
                //默认每页数据量
                pagesize: 8,

                //默认高亮行数据id
                highlightId: -1,

                //当前页码
                currentPage: 1,

                //查询的页码
                start: 1,

                //默认数据总数
                totalCount: 0,

                msgSendInterfaceConfigDia : false,

                editmsgSendInterfaceConfigDia: false,

                editMsgSendInterfaceConfigform:{},

                msgSendInterfaceConfigform:{},
                formLabelWidth: '160px',
            }
        },
         mounted(){
           this.initloadData();
        },

        methods: {
            handleSizeChange(val) {
                console.log(`每页 ${val} 条`);
            },
            handleCurrentChange(val) {
                console.log(`当前页: ${val}`);
            },
            async initloadData() {
            	let param ={
            		msgParamsState:0,
            		msgSendIntegerState:1
            	}
            	this.tableData3 = [];
                const res = await selectMsgConfig(param);
                if (res.isSuccess == true) {
                    this.tableData3 = res.result.data;
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
            },


           async msgSendInterfaceConfigFormSubmit(formName){
            	this.$refs[formName].validate(async (valid) => {
					if (valid) {
                        const res = await createSendInterfaceConfig(this.msgSendInterfaceConfigform);
                        if (res.isSuccess == true) {
                            this.$message({
                                type: 'success',
                                message: res.result.msg
                            });
                             this.msgSendInterfaceConfigDia = false;
                             this.initloadData();
                        }else{
                            this.$message({
                                type: 'error',
                                message: res.errorMsg
                            });
                        }
					} else {

						return false;
					}
				});
          	},

          	async editmsgSendInterfaceConfigFormSubmit(formName){
            	this.$refs[formName].validate(async (valid) => {
					if (valid) {
                        const res = await updateMsgConfig(this.editMsgSendInterfaceConfigform);
                        if (res.isSuccess == true) {
                            this.$message({
                                type: 'success',
                                message: res.result.msg
                            });
                             this.editmsgSendInterfaceConfigDia = false;
                             this.initloadData();
                        }else{
                            this.$message({
                                type: 'error',
                                message: res.errorMsg
                            });
                        }
					} else {

						return false;
					}
				});
          	},

          	showMsgSendInterfaceConfig(){
          		this.msgSendInterfaceConfigform = {
          			sendStatus:'1'
          		}
          		this.msgSendInterfaceConfigDia = true;
          	},
          	formatSendStatus:function(row, column) {
            	let data = row.sendStatus;
            	if(data == 1){
            		return "开启";
            	}else if(data == 2){
            		return "关闭";
            	}else{
            		return "";
            	}
            },

            editdialog(rows){
            	this.editMsgSendInterfaceConfigform = {
            	    id:rows.id,
            	    sendAccount:rows.sendAccount,
            	    platform:rows.platform,
            	    sendStatus:rows.sendStatus+''
            	};
            	this.editmsgSendInterfaceConfigDia = true;
            },

            //多选响应
            handleSelectionChange: function(val) {
                this.multipleSelection = val;
            },

            async batchDelete(){
				if(this.multipleSelection.length==0)
                    return;
                var array = [];
                this.multipleSelection.forEach((item) => {
                    array.push(item.id);
                })
                let param = {
                	ids:array
                }
                const res = await batchDeleteMsgConfig(param);
            	if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: res.result.msg
                    });
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
                this.initloadData();
            },

            async configDelete(id){
            	let array = [id];
            	let param = {
                	ids:array
                }
                const res = await batchDeleteMsgConfig(param);
            	if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: res.result.msg
                    });
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
                this.initloadData();
            }
        }
    }
</script>

<style lang="less">
    @import '../style/mixin';
    @import '../style/common';
    @import '../style/msgSendInterfaceConfig';
</style>
