<template>
    <div class="fillcontain">
        <ul class="menu">
            <li>
                <router-link :to='{path:"/currentInventory"}'>当前库存</router-link>
            </li>
            <li>
                <router-link :to='{path:"/inventoryDetail"}'>库存变动</router-link>
            </li>
            <li>
                <router-link :to='{path:"/stocktaking"}'>库存盘点</router-link>
            </li>
            <li>
                <router-link :to='{path:"/stockTransshipment"}'>库存调拨</router-link>
            </li>
            <li>
                <router-link :to='{path:"/inventoryWarning"}'>库存预警</router-link>
            </li>
            <li>
                <router-link :to='{path:"/storeManagement"}'>多仓管理</router-link>
            </li>
            <li class="menuIndex">
                <router-link :to='{path:"/inventoryInitialize"}'>库存初始化</router-link>
            </li>
        </ul>
        <div class="inventoryInitialize">

            <div class="initializeButton">
                <a href="javascript:void(0)" class="buttonColor" @click="">导入库存表</a>
                <input type="file" id="uploatfile" @change="importf" >
                <a href="javascript:void(0)" class="buttonColor" @click="toAddProduct">添加商品</a>
                <a href="javascript:void(0)" class="buttonColor" @click="dialogVisible = true">初始化完成</a>
            </div>
            <div class="initializeTable">
                <el-table
                :data="tableData"
                style="width: 100%">
                <el-table-column
                    label="主图/货号">
                    <template scope="scope">
                        <div class="flex2">
                            <img src="../image/111.png" alt="">
                            <p>{{scope.row.productCode}}</p>
                        </div>
                    </template>
                </el-table-column>
                <el-table-column
                    prop="title"
                    label="商品名称"
                    width="180">
                </el-table-column>
                <el-table-column
                    prop="colour"
                    label="颜色"
                    width="180">
                </el-table-column>
                <el-table-column
                    prop="size"
                    label="尺码"
                    width="180">
                </el-table-column>
                <el-table-column
                    prop="stockNum"
                    label="初始化库存">
                </el-table-column>
                <el-table-column
                    prop="purchasePrice"
                    label="初始化单价">
                </el-table-column>
                <el-table-column
                    prop="stockPrice"
                    label="当前库存总金额">
                </el-table-column>
            </el-table>
            </div>
            <a href="javascript:void(0)" class="export_excle">导出excel</a>
        </div>
        <el-dialog
            title="库存初始化确认"
            :visible.sync="dialogVisible"
            size="tiny">
            <span>是否确认库存已初始化完成？</span>
            <p>完成后库存将不能再修改</p>
            <span slot="footer" class="dialog-footer flex2">
                <el-button type="primary" @click="initStock">确 定</el-button>
                <el-button @click="dialogVisible = false">取 消</el-button>
              </span>
        </el-dialog>
        <el-dialog
            title="添加新商品"
            :visible.sync="dialogNewCommodity"
            size="small">
            <div class="newCommodity">
                <el-form ref="form" :model="form" label-width="210px">
                    <el-form-item label="商品货号：">
                        <el-input v-model="form.productCode" class="newInput"></el-input>
                    </el-form-item>
                    <el-form-item label="商品名称：">
                        <el-input v-model="form.productName" class="newInput"></el-input>
                    </el-form-item>
                    <el-form-item label="商品主图：">
                        <el-upload v-model="form.imgUrl_main"
                            class="avatar-uploader"
                            action="https://jsonplaceholder.typicode.com/posts/"
                            :show-file-list="false"
                            :on-success="handleAvatarSuccess"
                            :before-upload="beforeAvatarUpload">
                            <img v-if="imageUrl" :src="imageUrl" class="avatar">
                            <i v-else class="el-icon-plus avatar-uploader-icon"></i>
                        </el-upload>
                    </el-form-item>
                </el-form>
                <el-table
                    height="160"
                    :data="tableData2"
                    style="width: 100%">
                    <el-table-column
                        prop="colour"
                        label="颜色">
                        <template scope="scope">
                            <el-input v-model="scope.row.colour"></el-input>
                        </template>
                    </el-table-column>
                    <el-table-column
                        prop="size"
                        label="尺码">
                        <template scope="scope">
                            <el-input v-model="scope.row.size"></el-input>
                        </template>
                    </el-table-column>
                    <el-table-column
                        prop="stockNum"
                        label="初始化库存">
                        <template scope="scope">
                            <el-input v-model="scope.row.stockNum"></el-input>
                        </template>
                    </el-table-column>
                    <el-table-column
                        prop="purchasePrice"
                        label="初始化单价">
                        <template scope="scope">
                            <el-input v-model="scope.row.purchasePrice"></el-input>
                        </template>
                    </el-table-column>
                    <el-table-column
                        label="操作">
                        <template scope="scope">
                            <img src="../image/delete03.png" alt=""  @click="delVariant(scope.$index, scope.row)">
                        </template>
                    </el-table-column>
                </el-table>
                <a href="javascript:void(0)" class="blue2 right" @click="addVariant">+添加规格</a>
            </div>
            <span slot="footer" class="dialog-footer flex2">
                <a href="javascript:void(0)" class="buttonColor" @click="addProduct">确认添加</a>
                <a href="javascript:void(0)" class="buttonColor2" @click="dialogNewCommodity = false">取 消</a>
              </span>
        </el-dialog>
    </div>
</template>

<script>
    import headTop from '../components/headTop'
    import {initStocksByVariants} from '@/api/getData'
    import {export_json_to_excel} from '../vendor/Export2Excel.js'
    import {userInfo,getStore,setStore} from  '../config/mUtils'
    const _XLSX = require('xlsx')
    const X = typeof XLSX !== 'undefined' ? XLSX : _XLSX;





    export default {
        components: {
            headTop,
        },
        data() {
            return {
                form: {
                    name: '',
                    table:[{
                        color:'白色',
                    }]
                },
                input:'',
                imageUrl: '',
                dialogNewCommodity:false,
                dialogVisible:false,
                tableData: [],
                tableData2:[{}]

            }
        },
        methods: {
            handleAvatarSuccess(res, file) {
                this.imageUrl = URL.createObjectURL(file.raw);
            },
            beforeAvatarUpload(file) {
                const isJPG = file.type === 'image/jpeg';
                const isLt2M = file.size / 1024 / 1024 < 2;

                if (!isJPG) {
                    this.$message.error('上传头像图片只能是 JPG 格式!');
                }
                if (!isLt2M) {
                    this.$message.error('上传头像图片大小不能超过 2MB!');
                }
                return isJPG && isLt2M;
            },
            async importf(){
                let importExcelData = [];
                let obj = document.getElementById("uploatfile");
                var wb;//读取完成的数据
                var rABS = false; //是否将文件读取为二进制字符串
                if(!obj.files) {
                    return;
                }
                var f = obj.files[0];
                var reader = new FileReader();
                reader.onload =(e) =>{
                    var data = e.target.result;
                    if(rABS) {
                        wb = X.read(btoa(fixdata(data)), {//手动转化
                            type: 'base64'
                        });
                    } else {
                        wb = X.read(data, {
                            type: 'binary'
                        });
                    }

                    //wb.SheetNames[0]是获取Sheets中第一个Sheet的名字
                    //wb.Sheets[Sheet名]获取第一个Sheet的数据
                    importExcelData =  X.utils.sheet_to_json(wb.Sheets[wb.SheetNames[0]]);
                    importExcelData.forEach((obj)=>{
                        // 主图	货号	商品名称	颜色	尺码	初始化库存	初始化单价	当前库存总金额
                        var newObj = new Object();
                        newObj.productCode = obj.货号;
                        newObj.title = obj.商品名称;
                        newObj.colour = obj.颜色;
                        newObj.size = obj.尺码;
                        newObj.stockNum = obj.初始化库存;
                        newObj.purchasePrice = obj.初始化单价;
                        newObj.stockPrice = obj.初始化单价*obj.初始化库存;
                        newObj.companyId = userInfo().companyId;
                        newObj.warehouseId = userInfo().warehouseId;
                        this.tableData.push(newObj)
                    })

                };

                if(rABS) {
                    reader.readAsArrayBuffer(f);
                } else {
                    reader.readAsBinaryString(f);
                }

            },

            fixdata(){ //文件流转BinaryString
                var o = "",
                    l = 0,
                    w = 10240;
                for(; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));
                o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));
                return o;
            },
             addProduct(){
                if(this.form.productCode&&this.form.productName&& this.tableData2.length>0){
                    let stockInfo =  [];
                    this.tableData2.forEach((obj)=>{
                        if(JSON.stringify(obj) == "{}"){
                            this.$message({type:'error',message:'规格填写不正确,请检查！'})
                            return ;
                        }
                        obj.productCode =this.form.productCode;
                        obj.imgUrl_main = this.form.imgUrl_main;
                        obj.title = this.form.productName;
                        obj.stockPrice = obj.stockNum*obj.purchasePrice
                        obj.companyId = userInfo().companyId;
                        obj.warehouseId = userInfo().warehouseId;
                        stockInfo.push(obj);
                    })
                    this.tableData = this.tableData.concat(stockInfo)
                    this.dialogNewCommodity = false
                }else{
                    this.$message({type:'error',message:'填写不正确！'})
                }


            },
            delVariant(index, row){
               this.tableData2.splice(index,1,)
            },
            addVariant(){
                this.tableData2.push({})
            },
            toAddProduct(){
                this.form={};
                this.tableData2=[{}];
                this.dialogNewCommodity = true
            },
            async initStock(){
                let param = this.tableData;
                const res = await initStocksByVariants(param);
                if (res.isSuccess == true) {
                    this.$message({
                        type: 'success',
                        message: '初始化完成！'
                    });
                }else{
                    this.$message({
                        type: 'error',
                        message: res.errorMsg
                    });
                }
                this.dialogVisible = false
            },
        }

    }
</script>

<style lang="less">
    @import '../style/mixin';
    @import '../style/common';
    @import '../style/inventoryInitialize';
</style>
